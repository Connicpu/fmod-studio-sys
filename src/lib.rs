#![allow(non_snake_case, non_camel_case_types)]
/* automatically generated by rust-bindgen */

pub const FMOD_VERSION: ::std::os::raw::c_uint = 0x00010800;

pub const FMOD_STUDIO_INIT_NORMAL: ::std::os::raw::c_uint = 0x00000000;
pub const FMOD_STUDIO_INIT_LIVEUPDATE: ::std::os::raw::c_uint = 0x00000001;
pub const FMOD_STUDIO_INIT_ALLOW_MISSING_PLUGINS: ::std::os::raw::c_uint = 0x00000002;
pub const FMOD_STUDIO_INIT_SYNCHRONOUS_UPDATE: ::std::os::raw::c_uint = 0x00000004;
pub const FMOD_STUDIO_INIT_DEFERRED_CALLBACKS: ::std::os::raw::c_uint = 0x00000008;

pub type FMOD_BOOL = ::std::os::raw::c_int;
pub enum FMOD_SYSTEM { }

pub enum FMOD_SOUND { }

pub enum FMOD_CHANNELCONTROL { }

pub enum FMOD_CHANNEL { }

pub enum FMOD_CHANNELGROUP { }

pub enum FMOD_SOUNDGROUP { }

pub enum FMOD_REVERB3D { }

pub enum FMOD_DSP { }

pub enum FMOD_DSPCONNECTION { }

pub enum FMOD_POLYGON { }

pub enum FMOD_GEOMETRY { }

pub enum FMOD_SYNCPOINT { }


pub type FMOD_MODE = ::std::os::raw::c_uint;
pub type FMOD_TIMEUNIT = ::std::os::raw::c_uint;
pub type FMOD_INITFLAGS = ::std::os::raw::c_uint;
pub type FMOD_DEBUG_FLAGS = ::std::os::raw::c_uint;
pub type FMOD_MEMORY_TYPE = ::std::os::raw::c_uint;
pub type FMOD_SYSTEM_CALLBACK_TYPE = ::std::os::raw::c_uint;
pub type FMOD_CHANNELMASK = ::std::os::raw::c_uint;
pub type FMOD_DRIVER_STATE = ::std::os::raw::c_uint;
pub type FMOD_PORT_TYPE = ::std::os::raw::c_uint;
pub type FMOD_PORT_INDEX = ::std::os::raw::c_ulonglong;
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_RESULT {
    FMOD_OK = 0,
    FMOD_ERR_BADCOMMAND = 1,
    FMOD_ERR_CHANNEL_ALLOC = 2,
    FMOD_ERR_CHANNEL_STOLEN = 3,
    FMOD_ERR_DMA = 4,
    FMOD_ERR_DSP_CONNECTION = 5,
    FMOD_ERR_DSP_DONTPROCESS = 6,
    FMOD_ERR_DSP_FORMAT = 7,
    FMOD_ERR_DSP_INUSE = 8,
    FMOD_ERR_DSP_NOTFOUND = 9,
    FMOD_ERR_DSP_RESERVED = 10,
    FMOD_ERR_DSP_SILENCE = 11,
    FMOD_ERR_DSP_TYPE = 12,
    FMOD_ERR_FILE_BAD = 13,
    FMOD_ERR_FILE_COULDNOTSEEK = 14,
    FMOD_ERR_FILE_DISKEJECTED = 15,
    FMOD_ERR_FILE_EOF = 16,
    FMOD_ERR_FILE_ENDOFDATA = 17,
    FMOD_ERR_FILE_NOTFOUND = 18,
    FMOD_ERR_FORMAT = 19,
    FMOD_ERR_HEADER_MISMATCH = 20,
    FMOD_ERR_HTTP = 21,
    FMOD_ERR_HTTP_ACCESS = 22,
    FMOD_ERR_HTTP_PROXY_AUTH = 23,
    FMOD_ERR_HTTP_SERVER_ERROR = 24,
    FMOD_ERR_HTTP_TIMEOUT = 25,
    FMOD_ERR_INITIALIZATION = 26,
    FMOD_ERR_INITIALIZED = 27,
    FMOD_ERR_INTERNAL = 28,
    FMOD_ERR_INVALID_FLOAT = 29,
    FMOD_ERR_INVALID_HANDLE = 30,
    FMOD_ERR_INVALID_PARAM = 31,
    FMOD_ERR_INVALID_POSITION = 32,
    FMOD_ERR_INVALID_SPEAKER = 33,
    FMOD_ERR_INVALID_SYNCPOINT = 34,
    FMOD_ERR_INVALID_THREAD = 35,
    FMOD_ERR_INVALID_VECTOR = 36,
    FMOD_ERR_MAXAUDIBLE = 37,
    FMOD_ERR_MEMORY = 38,
    FMOD_ERR_MEMORY_CANTPOINT = 39,
    FMOD_ERR_NEEDS3D = 40,
    FMOD_ERR_NEEDSHARDWARE = 41,
    FMOD_ERR_NET_CONNECT = 42,
    FMOD_ERR_NET_SOCKET_ERROR = 43,
    FMOD_ERR_NET_URL = 44,
    FMOD_ERR_NET_WOULD_BLOCK = 45,
    FMOD_ERR_NOTREADY = 46,
    FMOD_ERR_OUTPUT_ALLOCATED = 47,
    FMOD_ERR_OUTPUT_CREATEBUFFER = 48,
    FMOD_ERR_OUTPUT_DRIVERCALL = 49,
    FMOD_ERR_OUTPUT_FORMAT = 50,
    FMOD_ERR_OUTPUT_INIT = 51,
    FMOD_ERR_OUTPUT_NODRIVERS = 52,
    FMOD_ERR_PLUGIN = 53,
    FMOD_ERR_PLUGIN_MISSING = 54,
    FMOD_ERR_PLUGIN_RESOURCE = 55,
    FMOD_ERR_PLUGIN_VERSION = 56,
    FMOD_ERR_RECORD = 57,
    FMOD_ERR_REVERB_CHANNELGROUP = 58,
    FMOD_ERR_REVERB_INSTANCE = 59,
    FMOD_ERR_SUBSOUNDS = 60,
    FMOD_ERR_SUBSOUND_ALLOCATED = 61,
    FMOD_ERR_SUBSOUND_CANTMOVE = 62,
    FMOD_ERR_TAGNOTFOUND = 63,
    FMOD_ERR_TOOMANYCHANNELS = 64,
    FMOD_ERR_TRUNCATED = 65,
    FMOD_ERR_UNIMPLEMENTED = 66,
    FMOD_ERR_UNINITIALIZED = 67,
    FMOD_ERR_UNSUPPORTED = 68,
    FMOD_ERR_VERSION = 69,
    FMOD_ERR_EVENT_ALREADY_LOADED = 70,
    FMOD_ERR_EVENT_LIVEUPDATE_BUSY = 71,
    FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH = 72,
    FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT = 73,
    FMOD_ERR_EVENT_NOTFOUND = 74,
    FMOD_ERR_STUDIO_UNINITIALIZED = 75,
    FMOD_ERR_STUDIO_NOT_LOADED = 76,
    FMOD_ERR_INVALID_STRING = 77,
    FMOD_ERR_ALREADY_LOCKED = 78,
    FMOD_ERR_NOT_LOCKED = 79,
    FMOD_ERR_RECORD_DISCONNECTED = 80,
    FMOD_ERR_TOOMANYSAMPLES = 81,
    FMOD_RESULT_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_CHANNELCONTROL_TYPE {
    FMOD_CHANNELCONTROL_CHANNEL = 0,
    FMOD_CHANNELCONTROL_CHANNELGROUP = 1,
    FMOD_CHANNELCONTROL_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_VECTOR {
    pub x: ::std::os::raw::c_float,
    pub y: ::std::os::raw::c_float,
    pub z: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_VECTOR {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_VECTOR {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_3D_ATTRIBUTES {
    pub position: FMOD_VECTOR,
    pub velocity: FMOD_VECTOR,
    pub forward: FMOD_VECTOR,
    pub up: FMOD_VECTOR,
}
impl ::std::clone::Clone for FMOD_3D_ATTRIBUTES {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_3D_ATTRIBUTES {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_GUID {
    pub Data1: ::std::os::raw::c_uint,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
impl ::std::clone::Clone for FMOD_GUID {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_GUID {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FMOD_FILE_ASYNCDONE =
    ::std::option::Option<unsafe extern "C" fn(info: *mut FMOD_ASYNCREADINFO,
                                               result: FMOD_RESULT)>;
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_ASYNCREADINFO {
    pub handle: *mut ::std::os::raw::c_void,
    pub offset: ::std::os::raw::c_uint,
    pub sizebytes: ::std::os::raw::c_uint,
    pub priority: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub buffer: *mut ::std::os::raw::c_void,
    pub bytesread: ::std::os::raw::c_uint,
    pub done: FMOD_FILE_ASYNCDONE,
}
impl ::std::clone::Clone for FMOD_ASYNCREADINFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_ASYNCREADINFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_OUTPUTTYPE {
    FMOD_OUTPUTTYPE_AUTODETECT = 0,
    FMOD_OUTPUTTYPE_UNKNOWN = 1,
    FMOD_OUTPUTTYPE_NOSOUND = 2,
    FMOD_OUTPUTTYPE_WAVWRITER = 3,
    FMOD_OUTPUTTYPE_NOSOUND_NRT = 4,
    FMOD_OUTPUTTYPE_WAVWRITER_NRT = 5,
    FMOD_OUTPUTTYPE_DSOUND = 6,
    FMOD_OUTPUTTYPE_WINMM = 7,
    FMOD_OUTPUTTYPE_WASAPI = 8,
    FMOD_OUTPUTTYPE_ASIO = 9,
    FMOD_OUTPUTTYPE_PULSEAUDIO = 10,
    FMOD_OUTPUTTYPE_ALSA = 11,
    FMOD_OUTPUTTYPE_COREAUDIO = 12,
    FMOD_OUTPUTTYPE_XAUDIO = 13,
    FMOD_OUTPUTTYPE_PS3 = 14,
    FMOD_OUTPUTTYPE_AUDIOTRACK = 15,
    FMOD_OUTPUTTYPE_OPENSL = 16,
    FMOD_OUTPUTTYPE_WIIU = 17,
    FMOD_OUTPUTTYPE_AUDIOOUT = 18,
    FMOD_OUTPUTTYPE_AUDIO3D = 19,
    FMOD_OUTPUTTYPE_ATMOS = 20,
    FMOD_OUTPUTTYPE_MAX = 21,
    FMOD_OUTPUTTYPE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DEBUG_MODE {
    FMOD_DEBUG_MODE_TTY = 0,
    FMOD_DEBUG_MODE_FILE = 1,
    FMOD_DEBUG_MODE_CALLBACK = 2,
    FMOD_DEBUG_MODE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_SPEAKERMODE {
    FMOD_SPEAKERMODE_DEFAULT = 0,
    FMOD_SPEAKERMODE_RAW = 1,
    FMOD_SPEAKERMODE_MONO = 2,
    FMOD_SPEAKERMODE_STEREO = 3,
    FMOD_SPEAKERMODE_QUAD = 4,
    FMOD_SPEAKERMODE_SURROUND = 5,
    FMOD_SPEAKERMODE_5POINT1 = 6,
    FMOD_SPEAKERMODE_7POINT1 = 7,
    FMOD_SPEAKERMODE_MAX = 8,
    FMOD_SPEAKERMODE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_SPEAKER {
    FMOD_SPEAKER_FRONT_LEFT = 0,
    FMOD_SPEAKER_FRONT_RIGHT = 1,
    FMOD_SPEAKER_FRONT_CENTER = 2,
    FMOD_SPEAKER_LOW_FREQUENCY = 3,
    FMOD_SPEAKER_SURROUND_LEFT = 4,
    FMOD_SPEAKER_SURROUND_RIGHT = 5,
    FMOD_SPEAKER_BACK_LEFT = 6,
    FMOD_SPEAKER_BACK_RIGHT = 7,
    FMOD_SPEAKER_MAX = 8,
    FMOD_SPEAKER_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_CHANNELORDER {
    FMOD_CHANNELORDER_DEFAULT = 0,
    FMOD_CHANNELORDER_WAVEFORMAT = 1,
    FMOD_CHANNELORDER_PROTOOLS = 2,
    FMOD_CHANNELORDER_ALLMONO = 3,
    FMOD_CHANNELORDER_ALLSTEREO = 4,
    FMOD_CHANNELORDER_ALSA = 5,
    FMOD_CHANNELORDER_MAX = 6,
    FMOD_CHANNELORDER_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_PLUGINTYPE {
    FMOD_PLUGINTYPE_OUTPUT = 0,
    FMOD_PLUGINTYPE_CODEC = 1,
    FMOD_PLUGINTYPE_DSP = 2,
    FMOD_PLUGINTYPE_MAX = 3,
    FMOD_PLUGINTYPE_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_PLUGINLIST {
    pub _type: FMOD_PLUGINTYPE,
    pub description: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for FMOD_PLUGINLIST {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_PLUGINLIST {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_SOUND_TYPE {
    FMOD_SOUND_TYPE_UNKNOWN = 0,
    FMOD_SOUND_TYPE_AIFF = 1,
    FMOD_SOUND_TYPE_ASF = 2,
    FMOD_SOUND_TYPE_DLS = 3,
    FMOD_SOUND_TYPE_FLAC = 4,
    FMOD_SOUND_TYPE_FSB = 5,
    FMOD_SOUND_TYPE_IT = 6,
    FMOD_SOUND_TYPE_MIDI = 7,
    FMOD_SOUND_TYPE_MOD = 8,
    FMOD_SOUND_TYPE_MPEG = 9,
    FMOD_SOUND_TYPE_OGGVORBIS = 10,
    FMOD_SOUND_TYPE_PLAYLIST = 11,
    FMOD_SOUND_TYPE_RAW = 12,
    FMOD_SOUND_TYPE_S3M = 13,
    FMOD_SOUND_TYPE_USER = 14,
    FMOD_SOUND_TYPE_WAV = 15,
    FMOD_SOUND_TYPE_XM = 16,
    FMOD_SOUND_TYPE_XMA = 17,
    FMOD_SOUND_TYPE_AUDIOQUEUE = 18,
    FMOD_SOUND_TYPE_AT9 = 19,
    FMOD_SOUND_TYPE_VORBIS = 20,
    FMOD_SOUND_TYPE_MEDIA_FOUNDATION = 21,
    FMOD_SOUND_TYPE_MEDIACODEC = 22,
    FMOD_SOUND_TYPE_FADPCM = 23,
    FMOD_SOUND_TYPE_MAX = 24,
    FMOD_SOUND_TYPE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_SOUND_FORMAT {
    FMOD_SOUND_FORMAT_NONE = 0,
    FMOD_SOUND_FORMAT_PCM8 = 1,
    FMOD_SOUND_FORMAT_PCM16 = 2,
    FMOD_SOUND_FORMAT_PCM24 = 3,
    FMOD_SOUND_FORMAT_PCM32 = 4,
    FMOD_SOUND_FORMAT_PCMFLOAT = 5,
    FMOD_SOUND_FORMAT_BITSTREAM = 6,
    FMOD_SOUND_FORMAT_MAX = 7,
    FMOD_SOUND_FORMAT_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_OPENSTATE {
    FMOD_OPENSTATE_READY = 0,
    FMOD_OPENSTATE_LOADING = 1,
    FMOD_OPENSTATE_ERROR = 2,
    FMOD_OPENSTATE_CONNECTING = 3,
    FMOD_OPENSTATE_BUFFERING = 4,
    FMOD_OPENSTATE_SEEKING = 5,
    FMOD_OPENSTATE_PLAYING = 6,
    FMOD_OPENSTATE_SETPOSITION = 7,
    FMOD_OPENSTATE_MAX = 8,
    FMOD_OPENSTATE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_SOUNDGROUP_BEHAVIOR {
    FMOD_SOUNDGROUP_BEHAVIOR_FAIL = 0,
    FMOD_SOUNDGROUP_BEHAVIOR_MUTE = 1,
    FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST = 2,
    FMOD_SOUNDGROUP_BEHAVIOR_MAX = 3,
    FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_CHANNELCONTROL_CALLBACK_TYPE {
    FMOD_CHANNELCONTROL_CALLBACK_END = 0,
    FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE = 1,
    FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT = 2,
    FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION = 3,
    FMOD_CHANNELCONTROL_CALLBACK_MAX = 4,
    FMOD_CHANNELCONTROL_CALLBACK_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(i32)]
pub enum FMOD_CHANNELCONTROL_DSP_INDEX {
    FMOD_CHANNELCONTROL_DSP_HEAD = -1,
    FMOD_CHANNELCONTROL_DSP_FADER = -2,
    FMOD_CHANNELCONTROL_DSP_PANNER = -3,
    FMOD_CHANNELCONTROL_DSP_TAIL = -4,
    FMOD_CHANNELCONTROL_DSP_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_ERRORCALLBACK_INSTANCETYPE {
    FMOD_ERRORCALLBACK_INSTANCETYPE_NONE = 0,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM = 1,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL = 2,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP = 3,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL = 4,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND = 5,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP = 6,
    FMOD_ERRORCALLBACK_INSTANCETYPE_DSP = 7,
    FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION = 8,
    FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY = 9,
    FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D = 10,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM = 11,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION = 12,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE = 13,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE = 14,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS = 15,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA = 16,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK = 17,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY = 18,
    FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_ERRORCALLBACK_INFO {
    pub result: FMOD_RESULT,
    pub instancetype: FMOD_ERRORCALLBACK_INSTANCETYPE,
    pub instance: *mut ::std::os::raw::c_void,
    pub functionname: *const ::std::os::raw::c_char,
    pub functionparams: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for FMOD_ERRORCALLBACK_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_ERRORCALLBACK_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FMOD_DEBUG_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(flags: FMOD_DEBUG_FLAGS,
                                               file:
                                                   *const ::std::os::raw::c_char,
                                               line: ::std::os::raw::c_int,
                                               func:
                                                   *const ::std::os::raw::c_char,
                                               message:
                                                   *const ::std::os::raw::c_char)
                              -> FMOD_RESULT>;
pub type FMOD_SYSTEM_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(system: *mut FMOD_SYSTEM,
                                               _type:
                                                   FMOD_SYSTEM_CALLBACK_TYPE,
                                               commanddata1:
                                                   *mut ::std::os::raw::c_void,
                                               commanddata2:
                                                   *mut ::std::os::raw::c_void,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_CHANNELCONTROL_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(channelcontrol:
                                                   *mut FMOD_CHANNELCONTROL,
                                               controltype:
                                                   FMOD_CHANNELCONTROL_TYPE,
                                               callbacktype:
                                                   FMOD_CHANNELCONTROL_CALLBACK_TYPE,
                                               commanddata1:
                                                   *mut ::std::os::raw::c_void,
                                               commanddata2:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_SOUND_NONBLOCK_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(sound: *mut FMOD_SOUND,
                                               result: FMOD_RESULT)
                              -> FMOD_RESULT>;
pub type FMOD_SOUND_PCMREAD_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(sound: *mut FMOD_SOUND,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               datalen:
                                                   ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_SOUND_PCMSETPOS_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(sound: *mut FMOD_SOUND,
                                               subsound:
                                                   ::std::os::raw::c_int,
                                               position:
                                                   ::std::os::raw::c_uint,
                                               postype: FMOD_TIMEUNIT)
                              -> FMOD_RESULT>;
pub type FMOD_FILE_OPEN_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(name:
                                                   *const ::std::os::raw::c_char,
                                               filesize:
                                                   *mut ::std::os::raw::c_uint,
                                               handle:
                                                   *mut *mut ::std::os::raw::c_void,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_FILE_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(handle:
                                                   *mut ::std::os::raw::c_void,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_FILE_READ_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(handle:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *mut ::std::os::raw::c_void,
                                               sizebytes:
                                                   ::std::os::raw::c_uint,
                                               bytesread:
                                                   *mut ::std::os::raw::c_uint,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_FILE_SEEK_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(handle:
                                                   *mut ::std::os::raw::c_void,
                                               pos: ::std::os::raw::c_uint,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_FILE_ASYNCREAD_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(info: *mut FMOD_ASYNCREADINFO,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_FILE_ASYNCCANCEL_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(info: *mut FMOD_ASYNCREADINFO,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_MEMORY_ALLOC_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(size: ::std::os::raw::c_uint,
                                               _type: FMOD_MEMORY_TYPE,
                                               sourcestr:
                                                   *const ::std::os::raw::c_char)
                              -> *mut ::std::os::raw::c_void>;
pub type FMOD_MEMORY_REALLOC_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               size: ::std::os::raw::c_uint,
                                               _type: FMOD_MEMORY_TYPE,
                                               sourcestr:
                                                   *const ::std::os::raw::c_char)
                              -> *mut ::std::os::raw::c_void>;
pub type FMOD_MEMORY_FREE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               _type: FMOD_MEMORY_TYPE,
                                               sourcestr:
                                                   *const ::std::os::raw::c_char)>;
pub type FMOD_3D_ROLLOFF_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(channelcontrol:
                                                   *mut FMOD_CHANNELCONTROL,
                                               distance:
                                                   ::std::os::raw::c_float)
                              -> ::std::os::raw::c_float>;
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_RESAMPLER {
    FMOD_DSP_RESAMPLER_DEFAULT = 0,
    FMOD_DSP_RESAMPLER_NOINTERP = 1,
    FMOD_DSP_RESAMPLER_LINEAR = 2,
    FMOD_DSP_RESAMPLER_CUBIC = 3,
    FMOD_DSP_RESAMPLER_SPLINE = 4,
    FMOD_DSP_RESAMPLER_MAX = 5,
    FMOD_DSP_RESAMPLER_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSPCONNECTION_TYPE {
    FMOD_DSPCONNECTION_TYPE_STANDARD = 0,
    FMOD_DSPCONNECTION_TYPE_SIDECHAIN = 1,
    FMOD_DSPCONNECTION_TYPE_SEND = 2,
    FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN = 3,
    FMOD_DSPCONNECTION_TYPE_MAX = 4,
    FMOD_DSPCONNECTION_TYPE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_TAGTYPE {
    FMOD_TAGTYPE_UNKNOWN = 0,
    FMOD_TAGTYPE_ID3V1 = 1,
    FMOD_TAGTYPE_ID3V2 = 2,
    FMOD_TAGTYPE_VORBISCOMMENT = 3,
    FMOD_TAGTYPE_SHOUTCAST = 4,
    FMOD_TAGTYPE_ICECAST = 5,
    FMOD_TAGTYPE_ASF = 6,
    FMOD_TAGTYPE_MIDI = 7,
    FMOD_TAGTYPE_PLAYLIST = 8,
    FMOD_TAGTYPE_FMOD = 9,
    FMOD_TAGTYPE_USER = 10,
    FMOD_TAGTYPE_MAX = 11,
    FMOD_TAGTYPE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_TAGDATATYPE {
    FMOD_TAGDATATYPE_BINARY = 0,
    FMOD_TAGDATATYPE_INT = 1,
    FMOD_TAGDATATYPE_FLOAT = 2,
    FMOD_TAGDATATYPE_STRING = 3,
    FMOD_TAGDATATYPE_STRING_UTF16 = 4,
    FMOD_TAGDATATYPE_STRING_UTF16BE = 5,
    FMOD_TAGDATATYPE_STRING_UTF8 = 6,
    FMOD_TAGDATATYPE_CDTOC = 7,
    FMOD_TAGDATATYPE_MAX = 8,
    FMOD_TAGDATATYPE_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_TAG {
    pub _type: FMOD_TAGTYPE,
    pub datatype: FMOD_TAGDATATYPE,
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub datalen: ::std::os::raw::c_uint,
    pub updated: FMOD_BOOL,
}
impl ::std::clone::Clone for FMOD_TAG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_TAG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_CREATESOUNDEXINFO {
    pub cbsize: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_uint,
    pub fileoffset: ::std::os::raw::c_uint,
    pub numchannels: ::std::os::raw::c_int,
    pub defaultfrequency: ::std::os::raw::c_int,
    pub format: FMOD_SOUND_FORMAT,
    pub decodebuffersize: ::std::os::raw::c_uint,
    pub initialsubsound: ::std::os::raw::c_int,
    pub numsubsounds: ::std::os::raw::c_int,
    pub inclusionlist: *mut ::std::os::raw::c_int,
    pub inclusionlistnum: ::std::os::raw::c_int,
    pub pcmreadcallback: FMOD_SOUND_PCMREAD_CALLBACK,
    pub pcmsetposcallback: FMOD_SOUND_PCMSETPOS_CALLBACK,
    pub nonblockcallback: FMOD_SOUND_NONBLOCK_CALLBACK,
    pub dlsname: *const ::std::os::raw::c_char,
    pub encryptionkey: *const ::std::os::raw::c_char,
    pub maxpolyphony: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub suggestedsoundtype: FMOD_SOUND_TYPE,
    pub fileuseropen: FMOD_FILE_OPEN_CALLBACK,
    pub fileuserclose: FMOD_FILE_CLOSE_CALLBACK,
    pub fileuserread: FMOD_FILE_READ_CALLBACK,
    pub fileuserseek: FMOD_FILE_SEEK_CALLBACK,
    pub fileuserasyncread: FMOD_FILE_ASYNCREAD_CALLBACK,
    pub fileuserasynccancel: FMOD_FILE_ASYNCCANCEL_CALLBACK,
    pub fileuserdata: *mut ::std::os::raw::c_void,
    pub filebuffersize: ::std::os::raw::c_int,
    pub channelorder: FMOD_CHANNELORDER,
    pub channelmask: FMOD_CHANNELMASK,
    pub initialsoundgroup: *mut FMOD_SOUNDGROUP,
    pub initialseekposition: ::std::os::raw::c_uint,
    pub initialseekpostype: FMOD_TIMEUNIT,
    pub ignoresetfilesystem: ::std::os::raw::c_int,
    pub audioqueuepolicy: ::std::os::raw::c_uint,
    pub minmidigranularity: ::std::os::raw::c_uint,
    pub nonblockthreadid: ::std::os::raw::c_int,
    pub fsbguid: *mut FMOD_GUID,
}
impl ::std::clone::Clone for FMOD_CREATESOUNDEXINFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_CREATESOUNDEXINFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_REVERB_PROPERTIES {
    pub DecayTime: ::std::os::raw::c_float,
    pub EarlyDelay: ::std::os::raw::c_float,
    pub LateDelay: ::std::os::raw::c_float,
    pub HFReference: ::std::os::raw::c_float,
    pub HFDecayRatio: ::std::os::raw::c_float,
    pub Diffusion: ::std::os::raw::c_float,
    pub Density: ::std::os::raw::c_float,
    pub LowShelfFrequency: ::std::os::raw::c_float,
    pub LowShelfGain: ::std::os::raw::c_float,
    pub HighCut: ::std::os::raw::c_float,
    pub EarlyLateMix: ::std::os::raw::c_float,
    pub WetLevel: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_REVERB_PROPERTIES {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_REVERB_PROPERTIES {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_ADVANCEDSETTINGS {
    pub cbSize: ::std::os::raw::c_int,
    pub maxMPEGCodecs: ::std::os::raw::c_int,
    pub maxADPCMCodecs: ::std::os::raw::c_int,
    pub maxXMACodecs: ::std::os::raw::c_int,
    pub maxVorbisCodecs: ::std::os::raw::c_int,
    pub maxAT9Codecs: ::std::os::raw::c_int,
    pub maxFADPCMCodecs: ::std::os::raw::c_int,
    pub maxPCMCodecs: ::std::os::raw::c_int,
    pub ASIONumChannels: ::std::os::raw::c_int,
    pub ASIOChannelList: *mut *mut ::std::os::raw::c_char,
    pub ASIOSpeakerList: *mut FMOD_SPEAKER,
    pub HRTFMinAngle: ::std::os::raw::c_float,
    pub HRTFMaxAngle: ::std::os::raw::c_float,
    pub HRTFFreq: ::std::os::raw::c_float,
    pub vol0virtualvol: ::std::os::raw::c_float,
    pub defaultDecodeBufferSize: ::std::os::raw::c_uint,
    pub profilePort: ::std::os::raw::c_ushort,
    pub geometryMaxFadeTime: ::std::os::raw::c_uint,
    pub distanceFilterCenterFreq: ::std::os::raw::c_float,
    pub reverb3Dinstance: ::std::os::raw::c_int,
    pub DSPBufferPoolSize: ::std::os::raw::c_int,
    pub stackSizeStream: ::std::os::raw::c_uint,
    pub stackSizeNonBlocking: ::std::os::raw::c_uint,
    pub stackSizeMixer: ::std::os::raw::c_uint,
    pub resamplerMethod: FMOD_DSP_RESAMPLER,
    pub commandQueueSize: ::std::os::raw::c_uint,
    pub randomSeed: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for FMOD_ADVANCEDSETTINGS {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_ADVANCEDSETTINGS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}



pub type FMOD_CODEC_OPEN_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               usermode: FMOD_MODE,
                                               userexinfo:
                                                   *mut FMOD_CREATESOUNDEXINFO)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_READ_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               buffer:
                                                   *mut ::std::os::raw::c_void,
                                               samples_in:
                                                   ::std::os::raw::c_uint,
                                               samples_out:
                                                   *mut ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_GETLENGTH_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               length:
                                                   *mut ::std::os::raw::c_uint,
                                               lengthtype: FMOD_TIMEUNIT)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_SETPOSITION_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               subsound:
                                                   ::std::os::raw::c_int,
                                               position:
                                                   ::std::os::raw::c_uint,
                                               postype: FMOD_TIMEUNIT)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_GETPOSITION_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               position:
                                                   *mut ::std::os::raw::c_uint,
                                               postype: FMOD_TIMEUNIT)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_SOUNDCREATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               subsound:
                                                   ::std::os::raw::c_int,
                                               sound: *mut FMOD_SOUND)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_METADATA_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               tagtype: FMOD_TAGTYPE,
                                               name:
                                                   *mut ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               datalen:
                                                   ::std::os::raw::c_uint,
                                               datatype: FMOD_TAGDATATYPE,
                                               unique: ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_CODEC_GETWAVEFORMAT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state:
                                                   *mut FMOD_CODEC_STATE,
                                               index: ::std::os::raw::c_int,
                                               waveformat:
                                                   *mut FMOD_CODEC_WAVEFORMAT)
                              -> FMOD_RESULT>;
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_CODEC_DESCRIPTION {
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub defaultasstream: ::std::os::raw::c_int,
    pub timeunits: FMOD_TIMEUNIT,
    pub open: FMOD_CODEC_OPEN_CALLBACK,
    pub close: FMOD_CODEC_CLOSE_CALLBACK,
    pub read: FMOD_CODEC_READ_CALLBACK,
    pub getlength: FMOD_CODEC_GETLENGTH_CALLBACK,
    pub setposition: FMOD_CODEC_SETPOSITION_CALLBACK,
    pub getposition: FMOD_CODEC_GETPOSITION_CALLBACK,
    pub soundcreate: FMOD_CODEC_SOUNDCREATE_CALLBACK,
    pub getwaveformat: FMOD_CODEC_GETWAVEFORMAT_CALLBACK,
}
impl ::std::clone::Clone for FMOD_CODEC_DESCRIPTION {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_CODEC_DESCRIPTION {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_CODEC_WAVEFORMAT {
    pub name: [::std::os::raw::c_char; 256usize],
    pub format: FMOD_SOUND_FORMAT,
    pub channels: ::std::os::raw::c_int,
    pub frequency: ::std::os::raw::c_int,
    pub lengthbytes: ::std::os::raw::c_uint,
    pub lengthpcm: ::std::os::raw::c_uint,
    pub pcmblocksize: ::std::os::raw::c_uint,
    pub loopstart: ::std::os::raw::c_int,
    pub loopend: ::std::os::raw::c_int,
    pub mode: FMOD_MODE,
    pub channelmask: FMOD_CHANNELMASK,
    pub channelorder: FMOD_CHANNELORDER,
    pub peakvolume: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_CODEC_WAVEFORMAT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_CODEC_WAVEFORMAT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_CODEC_STATE {
    pub numsubsounds: ::std::os::raw::c_int,
    pub waveformat: *mut FMOD_CODEC_WAVEFORMAT,
    pub plugindata: *mut ::std::os::raw::c_void,
    pub filehandle: *mut ::std::os::raw::c_void,
    pub filesize: ::std::os::raw::c_uint,
    pub fileread: FMOD_FILE_READ_CALLBACK,
    pub fileseek: FMOD_FILE_SEEK_CALLBACK,
    pub metadata: FMOD_CODEC_METADATA_CALLBACK,
    pub waveformatversion: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_CODEC_STATE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_CODEC_STATE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_TYPE {
    FMOD_DSP_TYPE_UNKNOWN = 0,
    FMOD_DSP_TYPE_MIXER = 1,
    FMOD_DSP_TYPE_OSCILLATOR = 2,
    FMOD_DSP_TYPE_LOWPASS = 3,
    FMOD_DSP_TYPE_ITLOWPASS = 4,
    FMOD_DSP_TYPE_HIGHPASS = 5,
    FMOD_DSP_TYPE_ECHO = 6,
    FMOD_DSP_TYPE_FADER = 7,
    FMOD_DSP_TYPE_FLANGE = 8,
    FMOD_DSP_TYPE_DISTORTION = 9,
    FMOD_DSP_TYPE_NORMALIZE = 10,
    FMOD_DSP_TYPE_LIMITER = 11,
    FMOD_DSP_TYPE_PARAMEQ = 12,
    FMOD_DSP_TYPE_PITCHSHIFT = 13,
    FMOD_DSP_TYPE_CHORUS = 14,
    FMOD_DSP_TYPE_VSTPLUGIN = 15,
    FMOD_DSP_TYPE_WINAMPPLUGIN = 16,
    FMOD_DSP_TYPE_ITECHO = 17,
    FMOD_DSP_TYPE_COMPRESSOR = 18,
    FMOD_DSP_TYPE_SFXREVERB = 19,
    FMOD_DSP_TYPE_LOWPASS_SIMPLE = 20,
    FMOD_DSP_TYPE_DELAY = 21,
    FMOD_DSP_TYPE_TREMOLO = 22,
    FMOD_DSP_TYPE_LADSPAPLUGIN = 23,
    FMOD_DSP_TYPE_SEND = 24,
    FMOD_DSP_TYPE_RETURN = 25,
    FMOD_DSP_TYPE_HIGHPASS_SIMPLE = 26,
    FMOD_DSP_TYPE_PAN = 27,
    FMOD_DSP_TYPE_THREE_EQ = 28,
    FMOD_DSP_TYPE_FFT = 29,
    FMOD_DSP_TYPE_LOUDNESS_METER = 30,
    FMOD_DSP_TYPE_ENVELOPEFOLLOWER = 31,
    FMOD_DSP_TYPE_CONVOLUTIONREVERB = 32,
    FMOD_DSP_TYPE_CHANNELMIX = 33,
    FMOD_DSP_TYPE_TRANSCEIVER = 34,
    FMOD_DSP_TYPE_OBJECTPAN = 35,
    FMOD_DSP_TYPE_MAX = 36,
    FMOD_DSP_TYPE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_OSCILLATOR {
    FMOD_DSP_OSCILLATOR_TYPE = 0,
    FMOD_DSP_OSCILLATOR_RATE = 1,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_LOWPASS {
    FMOD_DSP_LOWPASS_CUTOFF = 0,
    FMOD_DSP_LOWPASS_RESONANCE = 1,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_ITLOWPASS {
    FMOD_DSP_ITLOWPASS_CUTOFF = 0,
    FMOD_DSP_ITLOWPASS_RESONANCE = 1,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_HIGHPASS {
    FMOD_DSP_HIGHPASS_CUTOFF = 0,
    FMOD_DSP_HIGHPASS_RESONANCE = 1,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_ECHO {
    FMOD_DSP_ECHO_DELAY = 0,
    FMOD_DSP_ECHO_FEEDBACK = 1,
    FMOD_DSP_ECHO_DRYLEVEL = 2,
    FMOD_DSP_ECHO_WETLEVEL = 3,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_FLANGE {
    FMOD_DSP_FLANGE_MIX = 0,
    FMOD_DSP_FLANGE_DEPTH = 1,
    FMOD_DSP_FLANGE_RATE = 2,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_DISTORTION { FMOD_DSP_DISTORTION_LEVEL = 0, }
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_NORMALIZE {
    FMOD_DSP_NORMALIZE_FADETIME = 0,
    FMOD_DSP_NORMALIZE_THRESHHOLD = 1,
    FMOD_DSP_NORMALIZE_MAXAMP = 2,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_LIMITER {
    FMOD_DSP_LIMITER_RELEASETIME = 0,
    FMOD_DSP_LIMITER_CEILING = 1,
    FMOD_DSP_LIMITER_MAXIMIZERGAIN = 2,
    FMOD_DSP_LIMITER_MODE = 3,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PARAMEQ {
    FMOD_DSP_PARAMEQ_CENTER = 0,
    FMOD_DSP_PARAMEQ_BANDWIDTH = 1,
    FMOD_DSP_PARAMEQ_GAIN = 2,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PITCHSHIFT {
    FMOD_DSP_PITCHSHIFT_PITCH = 0,
    FMOD_DSP_PITCHSHIFT_FFTSIZE = 1,
    FMOD_DSP_PITCHSHIFT_OVERLAP = 2,
    FMOD_DSP_PITCHSHIFT_MAXCHANNELS = 3,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_CHORUS {
    FMOD_DSP_CHORUS_MIX = 0,
    FMOD_DSP_CHORUS_RATE = 1,
    FMOD_DSP_CHORUS_DEPTH = 2,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_ITECHO {
    FMOD_DSP_ITECHO_WETDRYMIX = 0,
    FMOD_DSP_ITECHO_FEEDBACK = 1,
    FMOD_DSP_ITECHO_LEFTDELAY = 2,
    FMOD_DSP_ITECHO_RIGHTDELAY = 3,
    FMOD_DSP_ITECHO_PANDELAY = 4,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_COMPRESSOR {
    FMOD_DSP_COMPRESSOR_THRESHOLD = 0,
    FMOD_DSP_COMPRESSOR_RATIO = 1,
    FMOD_DSP_COMPRESSOR_ATTACK = 2,
    FMOD_DSP_COMPRESSOR_RELEASE = 3,
    FMOD_DSP_COMPRESSOR_GAINMAKEUP = 4,
    FMOD_DSP_COMPRESSOR_USESIDECHAIN = 5,
    FMOD_DSP_COMPRESSOR_LINKED = 6,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_SFXREVERB {
    FMOD_DSP_SFXREVERB_DECAYTIME = 0,
    FMOD_DSP_SFXREVERB_EARLYDELAY = 1,
    FMOD_DSP_SFXREVERB_LATEDELAY = 2,
    FMOD_DSP_SFXREVERB_HFREFERENCE = 3,
    FMOD_DSP_SFXREVERB_HFDECAYRATIO = 4,
    FMOD_DSP_SFXREVERB_DIFFUSION = 5,
    FMOD_DSP_SFXREVERB_DENSITY = 6,
    FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY = 7,
    FMOD_DSP_SFXREVERB_LOWSHELFGAIN = 8,
    FMOD_DSP_SFXREVERB_HIGHCUT = 9,
    FMOD_DSP_SFXREVERB_EARLYLATEMIX = 10,
    FMOD_DSP_SFXREVERB_WETLEVEL = 11,
    FMOD_DSP_SFXREVERB_DRYLEVEL = 12,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_LOWPASS_SIMPLE { FMOD_DSP_LOWPASS_SIMPLE_CUTOFF = 0, }

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_DELAY {
    FMOD_DSP_DELAY_CH0 = 0,
    FMOD_DSP_DELAY_CH1 = 1,
    FMOD_DSP_DELAY_CH2 = 2,
    FMOD_DSP_DELAY_CH3 = 3,
    FMOD_DSP_DELAY_CH4 = 4,
    FMOD_DSP_DELAY_CH5 = 5,
    FMOD_DSP_DELAY_CH6 = 6,
    FMOD_DSP_DELAY_CH7 = 7,
    FMOD_DSP_DELAY_CH8 = 8,
    FMOD_DSP_DELAY_CH9 = 9,
    FMOD_DSP_DELAY_CH10 = 10,
    FMOD_DSP_DELAY_CH11 = 11,
    FMOD_DSP_DELAY_CH12 = 12,
    FMOD_DSP_DELAY_CH13 = 13,
    FMOD_DSP_DELAY_CH14 = 14,
    FMOD_DSP_DELAY_CH15 = 15,
    FMOD_DSP_DELAY_MAXDELAY = 16,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_TREMOLO {
    FMOD_DSP_TREMOLO_FREQUENCY = 0,
    FMOD_DSP_TREMOLO_DEPTH = 1,
    FMOD_DSP_TREMOLO_SHAPE = 2,
    FMOD_DSP_TREMOLO_SKEW = 3,
    FMOD_DSP_TREMOLO_DUTY = 4,
    FMOD_DSP_TREMOLO_SQUARE = 5,
    FMOD_DSP_TREMOLO_PHASE = 6,
    FMOD_DSP_TREMOLO_SPREAD = 7,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_SEND {
    FMOD_DSP_SEND_RETURNID = 0,
    FMOD_DSP_SEND_LEVEL = 1,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_RETURN {
    FMOD_DSP_RETURN_ID = 0,
    FMOD_DSP_RETURN_INPUT_SPEAKER_MODE = 1,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_HIGHPASS_SIMPLE { FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF = 0, }

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PAN_SURROUND_FROM_STEREO_MODE_TYPE {
    FMOD_DSP_PAN_SURROUND_FROM_STEREO_MODE_DISTRIBUTED = 0,
    FMOD_DSP_PAN_SURROUND_FROM_STEREO_MODE_DISCRETE = 1,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PAN_MODE_TYPE {
    FMOD_DSP_PAN_MODE_MONO = 0,
    FMOD_DSP_PAN_MODE_STEREO = 1,
    FMOD_DSP_PAN_MODE_SURROUND = 2,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PAN_3D_ROLLOFF_TYPE {
    FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED = 0,
    FMOD_DSP_PAN_3D_ROLLOFF_LINEAR = 1,
    FMOD_DSP_PAN_3D_ROLLOFF_INVERSE = 2,
    FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED = 3,
    FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM = 4,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE {
    FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO = 0,
    FMOD_DSP_PAN_3D_EXTENT_MODE_USER = 1,
    FMOD_DSP_PAN_3D_EXTENT_MODE_OFF = 2,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PAN {
    FMOD_DSP_PAN_MODE = 0,
    FMOD_DSP_PAN_STEREO_POSITION = 1,
    FMOD_DSP_PAN_SURROUND_DIRECTION = 2,
    FMOD_DSP_PAN_SURROUND_EXTENT = 3,
    FMOD_DSP_PAN_SURROUND_ROTATION = 4,
    FMOD_DSP_PAN_SURROUND_LFE_LEVEL = 5,
    FMOD_DSP_PAN_SURROUND_FROM_STEREO_MODE = 6,
    FMOD_DSP_PAN_SURROUND_STEREO_SEPARATION = 7,
    FMOD_DSP_PAN_SURROUND_STEREO_AXIS = 8,
    FMOD_DSP_PAN_ENABLED_SURROUND_SPEAKERS = 9,
    FMOD_DSP_PAN_3D_POSITION = 10,
    FMOD_DSP_PAN_3D_ROLLOFF = 11,
    FMOD_DSP_PAN_3D_MIN_DISTANCE = 12,
    FMOD_DSP_PAN_3D_MAX_DISTANCE = 13,
    FMOD_DSP_PAN_3D_EXTENT_MODE = 14,
    FMOD_DSP_PAN_3D_SOUND_SIZE = 15,
    FMOD_DSP_PAN_3D_MIN_EXTENT = 16,
    FMOD_DSP_PAN_3D_PAN_BLEND = 17,
    FMOD_DSP_PAN_LFE_UPMIX_ENABLED = 18,
    FMOD_DSP_PAN_OVERALL_GAIN = 19,
    FMOD_DSP_PAN_SURROUND_SPEAKER_MODE = 20,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE {
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB = 0,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB = 1,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB = 2,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_THREE_EQ {
    FMOD_DSP_THREE_EQ_LOWGAIN = 0,
    FMOD_DSP_THREE_EQ_MIDGAIN = 1,
    FMOD_DSP_THREE_EQ_HIGHGAIN = 2,
    FMOD_DSP_THREE_EQ_LOWCROSSOVER = 3,
    FMOD_DSP_THREE_EQ_HIGHCROSSOVER = 4,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE = 5,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_FFT_WINDOW {
    FMOD_DSP_FFT_WINDOW_RECT = 0,
    FMOD_DSP_FFT_WINDOW_TRIANGLE = 1,
    FMOD_DSP_FFT_WINDOW_HAMMING = 2,
    FMOD_DSP_FFT_WINDOW_HANNING = 3,
    FMOD_DSP_FFT_WINDOW_BLACKMAN = 4,
    FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS = 5,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_FFT {
    FMOD_DSP_FFT_WINDOWSIZE = 0,
    FMOD_DSP_FFT_WINDOWTYPE = 1,
    FMOD_DSP_FFT_SPECTRUMDATA = 2,
    FMOD_DSP_FFT_DOMINANT_FREQ = 3,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_ENVELOPEFOLLOWER {
    FMOD_DSP_ENVELOPEFOLLOWER_ATTACK = 0,
    FMOD_DSP_ENVELOPEFOLLOWER_RELEASE = 1,
    FMOD_DSP_ENVELOPEFOLLOWER_ENVELOPE = 2,
    FMOD_DSP_ENVELOPEFOLLOWER_USESIDECHAIN = 3,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_CONVOLUTION_REVERB {
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR = 0,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET = 1,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY = 2,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_CHANNELMIX_OUTPUT {
    FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT = 0,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO = 1,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO = 2,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD = 3,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1 = 4,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1 = 5,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE = 6,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_CHANNELMIX {
    FMOD_DSP_CHANNELMIX_OUTPUTGROUPING = 0,
    FMOD_DSP_CHANNELMIX_GAIN_CH0 = 1,
    FMOD_DSP_CHANNELMIX_GAIN_CH1 = 2,
    FMOD_DSP_CHANNELMIX_GAIN_CH2 = 3,
    FMOD_DSP_CHANNELMIX_GAIN_CH3 = 4,
    FMOD_DSP_CHANNELMIX_GAIN_CH4 = 5,
    FMOD_DSP_CHANNELMIX_GAIN_CH5 = 6,
    FMOD_DSP_CHANNELMIX_GAIN_CH6 = 7,
    FMOD_DSP_CHANNELMIX_GAIN_CH7 = 8,
    FMOD_DSP_CHANNELMIX_GAIN_CH8 = 9,
    FMOD_DSP_CHANNELMIX_GAIN_CH9 = 10,
    FMOD_DSP_CHANNELMIX_GAIN_CH10 = 11,
    FMOD_DSP_CHANNELMIX_GAIN_CH11 = 12,
    FMOD_DSP_CHANNELMIX_GAIN_CH12 = 13,
    FMOD_DSP_CHANNELMIX_GAIN_CH13 = 14,
    FMOD_DSP_CHANNELMIX_GAIN_CH14 = 15,
    FMOD_DSP_CHANNELMIX_GAIN_CH15 = 16,
    FMOD_DSP_CHANNELMIX_GAIN_CH16 = 17,
    FMOD_DSP_CHANNELMIX_GAIN_CH17 = 18,
    FMOD_DSP_CHANNELMIX_GAIN_CH18 = 19,
    FMOD_DSP_CHANNELMIX_GAIN_CH19 = 20,
    FMOD_DSP_CHANNELMIX_GAIN_CH20 = 21,
    FMOD_DSP_CHANNELMIX_GAIN_CH21 = 22,
    FMOD_DSP_CHANNELMIX_GAIN_CH22 = 23,
    FMOD_DSP_CHANNELMIX_GAIN_CH23 = 24,
    FMOD_DSP_CHANNELMIX_GAIN_CH24 = 25,
    FMOD_DSP_CHANNELMIX_GAIN_CH25 = 26,
    FMOD_DSP_CHANNELMIX_GAIN_CH26 = 27,
    FMOD_DSP_CHANNELMIX_GAIN_CH27 = 28,
    FMOD_DSP_CHANNELMIX_GAIN_CH28 = 29,
    FMOD_DSP_CHANNELMIX_GAIN_CH29 = 30,
    FMOD_DSP_CHANNELMIX_GAIN_CH30 = 31,
    FMOD_DSP_CHANNELMIX_GAIN_CH31 = 32,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(i32)]
pub enum FMOD_DSP_TRANSCEIVER_SPEAKERMODE {
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO = -1,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO = 0,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO = 1,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND = 2,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_TRANSCEIVER {
    FMOD_DSP_TRANSCEIVER_TRANSMIT = 0,
    FMOD_DSP_TRANSCEIVER_GAIN = 1,
    FMOD_DSP_TRANSCEIVER_CHANNEL = 2,
    FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE = 3,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_OBJECTPAN {
    FMOD_DSP_OBJECTPAN_3D_POSITION = 0,
    FMOD_DSP_OBJECTPAN_3D_ROLLOFF = 1,
    FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE = 2,
    FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE = 3,
    FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE = 4,
    FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE = 5,
    FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT = 6,
    FMOD_DSP_OBJECTPAN_OVERALL_GAIN = 7,
    FMOD_DSP_OBJECTPAN_OUTPUTGAIN = 8,
}


#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_BUFFER_ARRAY {
    pub numbuffers: ::std::os::raw::c_int,
    pub buffernumchannels: *mut ::std::os::raw::c_int,
    pub bufferchannelmask: *mut FMOD_CHANNELMASK,
    pub buffers: *mut *mut ::std::os::raw::c_float,
    pub speakermode: FMOD_SPEAKERMODE,
}
impl ::std::clone::Clone for FMOD_DSP_BUFFER_ARRAY {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_BUFFER_ARRAY {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PROCESS_OPERATION {
    FMOD_DSP_PROCESS_PERFORM = 0,
    FMOD_DSP_PROCESS_QUERY = 1,
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_COMPLEX {
    pub real: ::std::os::raw::c_float,
    pub imag: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_COMPLEX {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_COMPLEX {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PAN_SURROUND_FLAGS {
    FMOD_DSP_PAN_SURROUND_DEFAULT = 0,
    FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED = 1,
    FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT = 65536,
}

pub type FMOD_DSP_CREATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_RELEASE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_RESET_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_READ_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               inbuffer:
                                                   *mut ::std::os::raw::c_float,
                                               outbuffer:
                                                   *mut ::std::os::raw::c_float,
                                               length: ::std::os::raw::c_uint,
                                               inchannels:
                                                   ::std::os::raw::c_int,
                                               outchannels:
                                                   *mut ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_PROCESS_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               length: ::std::os::raw::c_uint,
                                               inbufferarray:
                                                   *const FMOD_DSP_BUFFER_ARRAY,
                                               outbufferarray:
                                                   *mut FMOD_DSP_BUFFER_ARRAY,
                                               inputsidle: FMOD_BOOL,
                                               op: FMOD_DSP_PROCESS_OPERATION)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SETPOSITION_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               pos: ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SHOULDIPROCESS_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               inputsidle: FMOD_BOOL,
                                               length: ::std::os::raw::c_uint,
                                               inmask: FMOD_CHANNELMASK,
                                               inchannels:
                                                   ::std::os::raw::c_int,
                                               speakermode: FMOD_SPEAKERMODE)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SETPARAM_FLOAT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               value: ::std::os::raw::c_float)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SETPARAM_INT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               value: ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SETPARAM_BOOL_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               value: FMOD_BOOL)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SETPARAM_DATA_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               length: ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_GETPARAM_FLOAT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               value:
                                                   *mut ::std::os::raw::c_float,
                                               valuestr:
                                                   *mut ::std::os::raw::c_char)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_GETPARAM_INT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               value:
                                                   *mut ::std::os::raw::c_int,
                                               valuestr:
                                                   *mut ::std::os::raw::c_char)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_GETPARAM_BOOL_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               value: *mut FMOD_BOOL,
                                               valuestr:
                                                   *mut ::std::os::raw::c_char)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_GETPARAM_DATA_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               index: ::std::os::raw::c_int,
                                               data:
                                                   *mut *mut ::std::os::raw::c_void,
                                               length:
                                                   *mut ::std::os::raw::c_uint,
                                               valuestr:
                                                   *mut ::std::os::raw::c_char)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_REGISTER_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_MIX_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               stage: ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_GETSAMPLERATE =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               rate:
                                                   *mut ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_GETBLOCKSIZE =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               blocksize:
                                                   *mut ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_GETSPEAKERMODE =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               speakermode_mixer:
                                                   *mut FMOD_SPEAKERMODE,
                                               speakermode_output:
                                                   *mut FMOD_SPEAKERMODE)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_DFT_FFTREAL =
    ::std::option::Option<unsafe extern "C" fn(thisdsp: *mut FMOD_DSP_STATE,
                                               size: ::std::os::raw::c_int,
                                               signal:
                                                   *const ::std::os::raw::c_float,
                                               dft: *mut FMOD_COMPLEX,
                                               window:
                                                   *const ::std::os::raw::c_float,
                                               signalhop:
                                                   ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_DFT_IFFTREAL =
    ::std::option::Option<unsafe extern "C" fn(thisdsp: *mut FMOD_DSP_STATE,
                                               size: ::std::os::raw::c_int,
                                               dft: *const FMOD_COMPLEX,
                                               signal:
                                                   *mut ::std::os::raw::c_float,
                                               window:
                                                   *const ::std::os::raw::c_float,
                                               signalhop:
                                                   ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_PAN_SUM_MONO_MATRIX =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               sourceSpeakerMode:
                                                   ::std::os::raw::c_int,
                                               lowFrequencyGain:
                                                   ::std::os::raw::c_float,
                                               overallGain:
                                                   ::std::os::raw::c_float,
                                               matrix:
                                                   *mut ::std::os::raw::c_float)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_PAN_SUM_STEREO_MATRIX =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               sourceSpeakerMode:
                                                   ::std::os::raw::c_int,
                                               pan: ::std::os::raw::c_float,
                                               lowFrequencyGain:
                                                   ::std::os::raw::c_float,
                                               overallGain:
                                                   ::std::os::raw::c_float,
                                               matrixHop:
                                                   ::std::os::raw::c_int,
                                               matrix:
                                                   *mut ::std::os::raw::c_float)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_PAN_SUM_SURROUND_MATRIX =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               sourceSpeakerMode:
                                                   ::std::os::raw::c_int,
                                               targetSpeakerMode:
                                                   ::std::os::raw::c_int,
                                               direction:
                                                   ::std::os::raw::c_float,
                                               extent:
                                                   ::std::os::raw::c_float,
                                               rotation:
                                                   ::std::os::raw::c_float,
                                               lowFrequencyGain:
                                                   ::std::os::raw::c_float,
                                               overallGain:
                                                   ::std::os::raw::c_float,
                                               matrixHop:
                                                   ::std::os::raw::c_int,
                                               matrix:
                                                   *mut ::std::os::raw::c_float,
                                               flags:
                                                   FMOD_DSP_PAN_SURROUND_FLAGS)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_PAN_SUM_MONO_TO_SURROUND_MATRIX =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               targetSpeakerMode:
                                                   ::std::os::raw::c_int,
                                               direction:
                                                   ::std::os::raw::c_float,
                                               extent:
                                                   ::std::os::raw::c_float,
                                               lowFrequencyGain:
                                                   ::std::os::raw::c_float,
                                               overallGain:
                                                   ::std::os::raw::c_float,
                                               matrixHop:
                                                   ::std::os::raw::c_int,
                                               matrix:
                                                   *mut ::std::os::raw::c_float)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_PAN_SUM_STEREO_TO_SURROUND_MATRIX =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               targetSpeakerMode:
                                                   ::std::os::raw::c_int,
                                               direction:
                                                   ::std::os::raw::c_float,
                                               extent:
                                                   ::std::os::raw::c_float,
                                               rotation:
                                                   ::std::os::raw::c_float,
                                               lowFrequencyGain:
                                                   ::std::os::raw::c_float,
                                               overallGain:
                                                   ::std::os::raw::c_float,
                                               matrixHop:
                                                   ::std::os::raw::c_int,
                                               matrix:
                                                   *mut ::std::os::raw::c_float)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_PAN_3D_GET_ROLLOFF_GAIN =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               rolloff:
                                                   FMOD_DSP_PAN_3D_ROLLOFF_TYPE,
                                               distance:
                                                   ::std::os::raw::c_float,
                                               mindistance:
                                                   ::std::os::raw::c_float,
                                               maxdistance:
                                                   ::std::os::raw::c_float,
                                               gain:
                                                   *mut ::std::os::raw::c_float)
                              -> FMOD_RESULT>;
pub type FMOD_DSP_STATE_GETCLOCK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE,
                                               clock:
                                                   *mut ::std::os::raw::c_ulonglong,
                                               offset:
                                                   *mut ::std::os::raw::c_uint,
                                               length:
                                                   *mut ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PARAMETER_TYPE {
    FMOD_DSP_PARAMETER_TYPE_FLOAT = 0,
    FMOD_DSP_PARAMETER_TYPE_INT = 1,
    FMOD_DSP_PARAMETER_TYPE_BOOL = 2,
    FMOD_DSP_PARAMETER_TYPE_DATA = 3,
    FMOD_DSP_PARAMETER_TYPE_MAX = 4,
    FMOD_DSP_PARAMETER_TYPE_FORCEINT = 65536,
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE {
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR = 0,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO = 1,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR = 2,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT = 65536,
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR {
    pub numpoints: ::std::os::raw::c_int,
    pub pointparamvalues: *mut ::std::os::raw::c_float,
    pub pointpositions: *mut ::std::os::raw::c_float,
}
impl ::std::clone::Clone for
 FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_FLOAT_MAPPING {
    pub _type: FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE,
    pub piecewiselinearmapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_FLOAT_MAPPING {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_FLOAT_MAPPING {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_DESC_FLOAT {
    pub min: ::std::os::raw::c_float,
    pub max: ::std::os::raw::c_float,
    pub defaultval: ::std::os::raw::c_float,
    pub mapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_DESC_FLOAT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_DESC_FLOAT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_DESC_INT {
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub defaultval: ::std::os::raw::c_int,
    pub goestoinf: FMOD_BOOL,
    pub valuenames: *const *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_DESC_INT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_DESC_INT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_DESC_BOOL {
    pub defaultval: FMOD_BOOL,
    pub valuenames: *const *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_DESC_BOOL {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_DESC_BOOL {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_DESC_DATA {
    pub datatype: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_DESC_DATA {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_DESC_DATA {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_DESC {
    pub _type: FMOD_DSP_PARAMETER_TYPE,
    pub name: [::std::os::raw::c_char; 16usize],
    pub label: [::std::os::raw::c_char; 16usize],
    pub description: *const ::std::os::raw::c_char,
    pub _bindgen_data_1_: [u64; 6usize],
}
impl FMOD_DSP_PARAMETER_DESC {
    pub unsafe fn floatdesc(&mut self) -> *mut FMOD_DSP_PARAMETER_DESC_FLOAT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn intdesc(&mut self) -> *mut FMOD_DSP_PARAMETER_DESC_INT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn booldesc(&mut self) -> *mut FMOD_DSP_PARAMETER_DESC_BOOL {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn datadesc(&mut self) -> *mut FMOD_DSP_PARAMETER_DESC_DATA {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_DESC {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_DESC {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(i32)]
pub enum FMOD_DSP_PARAMETER_DATA_TYPE {
    FMOD_DSP_PARAMETER_DATA_TYPE_USER = 0,
    FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = -1,
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = -2,
    FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN = -3,
    FMOD_DSP_PARAMETER_DATA_TYPE_FFT = -4,
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = -5,
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_OVERALLGAIN {
    pub linear_gain: ::std::os::raw::c_float,
    pub linear_gain_additive: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_OVERALLGAIN {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_OVERALLGAIN {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_3DATTRIBUTES {
    pub relative: FMOD_3D_ATTRIBUTES,
    pub absolute: FMOD_3D_ATTRIBUTES,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_3DATTRIBUTES {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_3DATTRIBUTES {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI {
    pub numlisteners: ::std::os::raw::c_int,
    pub relative: [FMOD_3D_ATTRIBUTES; 8usize],
    pub absolute: FMOD_3D_ATTRIBUTES,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_SIDECHAIN {
    pub sidechainenable: FMOD_BOOL,
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_SIDECHAIN {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_SIDECHAIN {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_PARAMETER_FFT {
    pub length: ::std::os::raw::c_int,
    pub numchannels: ::std::os::raw::c_int,
    pub spectrum: [*mut ::std::os::raw::c_float; 32usize],
}
impl ::std::clone::Clone for FMOD_DSP_PARAMETER_FFT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_PARAMETER_FFT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_DESCRIPTION {
    pub pluginsdkversion: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 32usize],
    pub version: ::std::os::raw::c_uint,
    pub numinputbuffers: ::std::os::raw::c_int,
    pub numoutputbuffers: ::std::os::raw::c_int,
    pub create: FMOD_DSP_CREATE_CALLBACK,
    pub release: FMOD_DSP_RELEASE_CALLBACK,
    pub reset: FMOD_DSP_RESET_CALLBACK,
    pub read: FMOD_DSP_READ_CALLBACK,
    pub process: FMOD_DSP_PROCESS_CALLBACK,
    pub setposition: FMOD_DSP_SETPOSITION_CALLBACK,
    pub numparameters: ::std::os::raw::c_int,
    pub paramdesc: *mut *mut FMOD_DSP_PARAMETER_DESC,
    pub setparameterfloat: FMOD_DSP_SETPARAM_FLOAT_CALLBACK,
    pub setparameterint: FMOD_DSP_SETPARAM_INT_CALLBACK,
    pub setparameterbool: FMOD_DSP_SETPARAM_BOOL_CALLBACK,
    pub setparameterdata: FMOD_DSP_SETPARAM_DATA_CALLBACK,
    pub getparameterfloat: FMOD_DSP_GETPARAM_FLOAT_CALLBACK,
    pub getparameterint: FMOD_DSP_GETPARAM_INT_CALLBACK,
    pub getparameterbool: FMOD_DSP_GETPARAM_BOOL_CALLBACK,
    pub getparameterdata: FMOD_DSP_GETPARAM_DATA_CALLBACK,
    pub shouldiprocess: FMOD_DSP_SHOULDIPROCESS_CALLBACK,
    pub userdata: *mut ::std::os::raw::c_void,
    pub sys_register: FMOD_DSP_SYSTEM_REGISTER_CALLBACK,
    pub sys_deregister: FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK,
    pub sys_mix: FMOD_DSP_SYSTEM_MIX_CALLBACK,
}
impl ::std::clone::Clone for FMOD_DSP_DESCRIPTION {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_DESCRIPTION {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_STATE_DFTCALLBACKS {
    pub fftreal: FMOD_DSP_DFT_FFTREAL,
    pub inversefftreal: FMOD_DSP_DFT_IFFTREAL,
}
impl ::std::clone::Clone for FMOD_DSP_STATE_DFTCALLBACKS {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_STATE_DFTCALLBACKS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_STATE_PAN_CALLBACKS {
    pub summonomatrix: FMOD_DSP_PAN_SUM_MONO_MATRIX,
    pub sumstereomatrix: FMOD_DSP_PAN_SUM_STEREO_MATRIX,
    pub sumsurroundmatrix: FMOD_DSP_PAN_SUM_SURROUND_MATRIX,
    pub summonotosurroundmatrix: FMOD_DSP_PAN_SUM_MONO_TO_SURROUND_MATRIX,
    pub sumstereotosurroundmatrix: FMOD_DSP_PAN_SUM_STEREO_TO_SURROUND_MATRIX,
    pub getrolloffgain: FMOD_DSP_PAN_3D_GET_ROLLOFF_GAIN,
}
impl ::std::clone::Clone for FMOD_DSP_STATE_PAN_CALLBACKS {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_STATE_PAN_CALLBACKS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_STATE_SYSTEMCALLBACKS {
    pub alloc: FMOD_MEMORY_ALLOC_CALLBACK,
    pub realloc: FMOD_MEMORY_REALLOC_CALLBACK,
    pub free: FMOD_MEMORY_FREE_CALLBACK,
    pub getsamplerate: FMOD_DSP_SYSTEM_GETSAMPLERATE,
    pub getblocksize: FMOD_DSP_SYSTEM_GETBLOCKSIZE,
    pub dft: *mut FMOD_DSP_STATE_DFTCALLBACKS,
    pub pancallbacks: *mut FMOD_DSP_STATE_PAN_CALLBACKS,
    pub getspeakermode: FMOD_DSP_SYSTEM_GETSPEAKERMODE,
    pub getclock: FMOD_DSP_STATE_GETCLOCK,
}
impl ::std::clone::Clone for FMOD_DSP_STATE_SYSTEMCALLBACKS {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_STATE_SYSTEMCALLBACKS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_STATE {
    pub instance: *mut FMOD_DSP,
    pub plugindata: *mut ::std::os::raw::c_void,
    pub channelmask: FMOD_CHANNELMASK,
    pub source_speakermode: FMOD_SPEAKERMODE,
    pub sidechaindata: *mut ::std::os::raw::c_float,
    pub sidechainchannels: ::std::os::raw::c_int,
    pub callbacks: *mut FMOD_DSP_STATE_SYSTEMCALLBACKS,
    pub systemobject: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_DSP_STATE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_STATE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_DSP_METERING_INFO {
    pub numsamples: ::std::os::raw::c_int,
    pub peaklevel: [::std::os::raw::c_float; 32usize],
    pub rmslevel: [::std::os::raw::c_float; 32usize],
    pub numchannels: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for FMOD_DSP_METERING_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_DSP_METERING_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}



pub type FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               numdrivers:
                                                   *mut ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_GETDRIVERINFO_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               id: ::std::os::raw::c_int,
                                               name:
                                                   *mut ::std::os::raw::c_char,
                                               namelen: ::std::os::raw::c_int,
                                               guid: *mut FMOD_GUID,
                                               systemrate:
                                                   *mut ::std::os::raw::c_int,
                                               speakermode:
                                                   *mut FMOD_SPEAKERMODE,
                                               speakermodechannels:
                                                   *mut ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_INIT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               selecteddriver:
                                                   ::std::os::raw::c_int,
                                               flags: FMOD_INITFLAGS,
                                               outputrate:
                                                   *mut ::std::os::raw::c_int,
                                               speakermode:
                                                   *mut FMOD_SPEAKERMODE,
                                               speakermodechannels:
                                                   *mut ::std::os::raw::c_int,
                                               outputformat:
                                                   *mut FMOD_SOUND_FORMAT,
                                               dspbufferlength:
                                                   ::std::os::raw::c_int,
                                               dspnumbuffers:
                                                   ::std::os::raw::c_int,
                                               extradriverdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_START_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_STOP_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_UPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_GETHANDLE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               handle:
                                                   *mut *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_GETPOSITION_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               pcm:
                                                   *mut ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_LOCK_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               offset: ::std::os::raw::c_uint,
                                               length: ::std::os::raw::c_uint,
                                               ptr1:
                                                   *mut *mut ::std::os::raw::c_void,
                                               ptr2:
                                                   *mut *mut ::std::os::raw::c_void,
                                               len1:
                                                   *mut ::std::os::raw::c_uint,
                                               len2:
                                                   *mut ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_UNLOCK_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               ptr1:
                                                   *mut ::std::os::raw::c_void,
                                               ptr2:
                                                   *mut ::std::os::raw::c_void,
                                               len1: ::std::os::raw::c_uint,
                                               len2: ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_MIXER_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               maxhardwareobjects:
                                                   *mut ::std::os::raw::c_int)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               object3d:
                                                   *mut *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_OBJECT3DFREE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               object3d:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               object3d:
                                                   *mut ::std::os::raw::c_void,
                                               info:
                                                   *const FMOD_OUTPUT_OBJECT3DINFO)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_READFROMMIXER =
    ::std::option::Option<unsafe extern "C" fn(output_state:
                                                   *mut FMOD_OUTPUT_STATE,
                                               buffer:
                                                   *mut ::std::os::raw::c_void,
                                               length: ::std::os::raw::c_uint)
                              -> FMOD_RESULT>;
pub type FMOD_OUTPUT_ALLOC =
    ::std::option::Option<unsafe extern "C" fn(size: ::std::os::raw::c_uint,
                                               align: ::std::os::raw::c_uint,
                                               file:
                                                   *const ::std::os::raw::c_char,
                                               line: ::std::os::raw::c_int)
                              -> *mut ::std::os::raw::c_void>;
pub type FMOD_OUTPUT_FREE =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               file:
                                                   *const ::std::os::raw::c_char,
                                               line: ::std::os::raw::c_int)>;
pub type FMOD_OUTPUT_LOG =
    ::std::option::Option<unsafe extern "C" fn(level: FMOD_DEBUG_FLAGS,
                                               file:
                                                   *const ::std::os::raw::c_char,
                                               line: ::std::os::raw::c_int,
                                               function:
                                                   *const ::std::os::raw::c_char,
                                               string:
                                                   *const ::std::os::raw::c_char, ...)>;
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_OUTPUT_DESCRIPTION {
    pub apiversion: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub polling: ::std::os::raw::c_int,
    pub getnumdrivers: FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK,
    pub getdriverinfo: FMOD_OUTPUT_GETDRIVERINFO_CALLBACK,
    pub init: FMOD_OUTPUT_INIT_CALLBACK,
    pub start: FMOD_OUTPUT_START_CALLBACK,
    pub stop: FMOD_OUTPUT_STOP_CALLBACK,
    pub close: FMOD_OUTPUT_CLOSE_CALLBACK,
    pub update: FMOD_OUTPUT_UPDATE_CALLBACK,
    pub gethandle: FMOD_OUTPUT_GETHANDLE_CALLBACK,
    pub getposition: FMOD_OUTPUT_GETPOSITION_CALLBACK,
    pub lock: FMOD_OUTPUT_LOCK_CALLBACK,
    pub unlock: FMOD_OUTPUT_UNLOCK_CALLBACK,
    pub mixer: FMOD_OUTPUT_MIXER_CALLBACK,
    pub object3dgetinfo: FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK,
    pub object3dalloc: FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK,
    pub object3dfree: FMOD_OUTPUT_OBJECT3DFREE_CALLBACK,
    pub object3dupdate: FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK,
}
impl ::std::clone::Clone for FMOD_OUTPUT_DESCRIPTION {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_OUTPUT_DESCRIPTION {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_OUTPUT_STATE {
    pub plugindata: *mut ::std::os::raw::c_void,
    pub readfrommixer: FMOD_OUTPUT_READFROMMIXER,
    pub alloc: FMOD_OUTPUT_ALLOC,
    pub free: FMOD_OUTPUT_FREE,
    pub log: FMOD_OUTPUT_LOG,
}
impl ::std::clone::Clone for FMOD_OUTPUT_STATE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_OUTPUT_STATE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_OUTPUT_OBJECT3DINFO {
    pub buffer: *mut ::std::os::raw::c_float,
    pub bufferlength: ::std::os::raw::c_uint,
    pub position: FMOD_VECTOR,
    pub gain: ::std::os::raw::c_float,
    pub spread: ::std::os::raw::c_float,
    pub priority: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_OUTPUT_OBJECT3DINFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_OUTPUT_OBJECT3DINFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum FMOD_STUDIO_SYSTEM { }

pub enum FMOD_STUDIO_EVENTDESCRIPTION { }

pub enum FMOD_STUDIO_EVENTINSTANCE { }

pub enum FMOD_STUDIO_PARAMETERINSTANCE { }

pub enum FMOD_STUDIO_BUS { }

pub enum FMOD_STUDIO_VCA { }

pub enum FMOD_STUDIO_BANK { }

pub enum FMOD_STUDIO_COMMANDREPLAY { }

pub type FMOD_STUDIO_INITFLAGS = ::std::os::raw::c_uint;
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_LOADING_STATE {
    FMOD_STUDIO_LOADING_STATE_UNLOADING = 0,
    FMOD_STUDIO_LOADING_STATE_UNLOADED = 1,
    FMOD_STUDIO_LOADING_STATE_LOADING = 2,
    FMOD_STUDIO_LOADING_STATE_LOADED = 3,
    FMOD_STUDIO_LOADING_STATE_ERROR = 4,
    FMOD_STUDIO_LOADING_STATE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_LOAD_MEMORY_MODE {
    FMOD_STUDIO_LOAD_MEMORY = 0,
    FMOD_STUDIO_LOAD_MEMORY_POINT = 1,
    FMOD_STUDIO_LOAD_MEMORY_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_PARAMETER_TYPE {
    FMOD_STUDIO_PARAMETER_GAME_CONTROLLED = 0,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE = 1,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_CONE_ANGLE = 2,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_ORIENTATION = 3,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_DIRECTION = 4,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_ELEVATION = 5,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_LISTENER_ORIENTATION = 6,
    FMOD_STUDIO_PARAMETER_MAX = 7,
    FMOD_STUDIO_PARAMETER_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_BANK_INFO {
    pub size: ::std::os::raw::c_int,
    pub userData: *mut ::std::os::raw::c_void,
    pub userDataLength: ::std::os::raw::c_int,
    pub openCallback: FMOD_FILE_OPEN_CALLBACK,
    pub closeCallback: FMOD_FILE_CLOSE_CALLBACK,
    pub readCallback: FMOD_FILE_READ_CALLBACK,
    pub seekCallback: FMOD_FILE_SEEK_CALLBACK,
}
impl ::std::clone::Clone for FMOD_STUDIO_BANK_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_BANK_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_PARAMETER_DESCRIPTION {
    pub name: *const ::std::os::raw::c_char,
    pub index: ::std::os::raw::c_int,
    pub minimum: ::std::os::raw::c_float,
    pub maximum: ::std::os::raw::c_float,
    pub defaultValue: ::std::os::raw::c_float,
    pub _type: FMOD_STUDIO_PARAMETER_TYPE,
}
impl ::std::clone::Clone for FMOD_STUDIO_PARAMETER_DESCRIPTION {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_PARAMETER_DESCRIPTION {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_USER_PROPERTY_TYPE {
    FMOD_STUDIO_USER_PROPERTY_TYPE_INTEGER = 0,
    FMOD_STUDIO_USER_PROPERTY_TYPE_BOOLEAN = 1,
    FMOD_STUDIO_USER_PROPERTY_TYPE_FLOAT = 2,
    FMOD_STUDIO_USER_PROPERTY_TYPE_STRING = 3,
    FMOD_STUDIO_USER_PROPERTY_TYPE_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_EVENT_PROPERTY {
    FMOD_STUDIO_EVENT_PROPERTY_CHANNELPRIORITY = 0,
    FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_DELAY = 1,
    FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_LOOKAHEAD = 2,
    FMOD_STUDIO_EVENT_PROPERTY_MINIMUM_DISTANCE = 3,
    FMOD_STUDIO_EVENT_PROPERTY_MAXIMUM_DISTANCE = 4,
    FMOD_STUDIO_EVENT_PROPERTY_MAX = 5,
    FMOD_STUDIO_EVENT_PROPERTY_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_USER_PROPERTY {
    pub name: *const ::std::os::raw::c_char,
    pub _type: FMOD_STUDIO_USER_PROPERTY_TYPE,
    pub _bindgen_data_1_: [u64; 1usize],
}
impl FMOD_STUDIO_USER_PROPERTY {
    pub unsafe fn intValue(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn boolValue(&mut self) -> *mut FMOD_BOOL {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn floatValue(&mut self) -> *mut ::std::os::raw::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn stringValue(&mut self)
     -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for FMOD_STUDIO_USER_PROPERTY {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_USER_PROPERTY {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type FMOD_STUDIO_SYSTEM_CALLBACK_TYPE = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_EVENT_CALLBACK_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES {
    pub name: *const ::std::os::raw::c_char,
    pub sound: *mut FMOD_SOUND,
    pub subsoundIndex: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES {
    pub name: *const ::std::os::raw::c_char,
    pub dsp: *mut FMOD_DSP,
}
impl ::std::clone::Clone for FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES {
    pub name: *const ::std::os::raw::c_char,
    pub position: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES {
    pub bar: ::std::os::raw::c_int,
    pub beat: ::std::os::raw::c_int,
    pub position: ::std::os::raw::c_int,
    pub tempo: ::std::os::raw::c_float,
    pub timeSignatureUpper: ::std::os::raw::c_int,
    pub timeSignatureLower: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_PLAYBACK_STATE {
    FMOD_STUDIO_PLAYBACK_PLAYING = 0,
    FMOD_STUDIO_PLAYBACK_SUSTAINING = 1,
    FMOD_STUDIO_PLAYBACK_STOPPED = 2,
    FMOD_STUDIO_PLAYBACK_STARTING = 3,
    FMOD_STUDIO_PLAYBACK_STOPPING = 4,
    FMOD_STUDIO_PLAYBACK_FORCEINT = 65536,
}
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_STOP_MODE {
    FMOD_STUDIO_STOP_ALLOWFADEOUT = 0,
    FMOD_STUDIO_STOP_IMMEDIATE = 1,
    FMOD_STUDIO_STOP_FORCEINT = 65536,
}
pub type FMOD_STUDIO_LOAD_BANK_FLAGS = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_ADVANCEDSETTINGS {
    pub cbSize: ::std::os::raw::c_int,
    pub commandQueueSize: ::std::os::raw::c_uint,
    pub handleInitialSize: ::std::os::raw::c_uint,
    pub studioUpdatePeriod: ::std::os::raw::c_int,
    pub idleSampleDataPoolSize: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_STUDIO_ADVANCEDSETTINGS {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_ADVANCEDSETTINGS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_CPU_USAGE {
    pub dspUsage: ::std::os::raw::c_float,
    pub streamUsage: ::std::os::raw::c_float,
    pub geometryUsage: ::std::os::raw::c_float,
    pub updateUsage: ::std::os::raw::c_float,
    pub studioUsage: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_STUDIO_CPU_USAGE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_CPU_USAGE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_BUFFER_INFO {
    pub currentUsage: ::std::os::raw::c_int,
    pub peakUsage: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_int,
    pub stallCount: ::std::os::raw::c_int,
    pub stallTime: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for FMOD_STUDIO_BUFFER_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_BUFFER_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_BUFFER_USAGE {
    pub studioCommandQueue: FMOD_STUDIO_BUFFER_INFO,
    pub studioHandle: FMOD_STUDIO_BUFFER_INFO,
}
impl ::std::clone::Clone for FMOD_STUDIO_BUFFER_USAGE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_BUFFER_USAGE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_SOUND_INFO {
    pub name_or_data: *const ::std::os::raw::c_char,
    pub mode: FMOD_MODE,
    pub exinfo: FMOD_CREATESOUNDEXINFO,
    pub subsoundIndex: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for FMOD_STUDIO_SOUND_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_SOUND_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type FMOD_STUDIO_COMMANDCAPTURE_FLAGS = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_COMMANDREPLAY_FLAGS = ::std::os::raw::c_uint;
#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u32)]
pub enum FMOD_STUDIO_INSTANCETYPE {
    FMOD_STUDIO_INSTANCETYPE_NONE = 0,
    FMOD_STUDIO_INSTANCETYPE_SYSTEM = 1,
    FMOD_STUDIO_INSTANCETYPE_EVENTDESCRIPTION = 2,
    FMOD_STUDIO_INSTANCETYPE_EVENTINSTANCE = 3,
    FMOD_STUDIO_INSTANCETYPE_PARAMETERINSTANCE = 4,
    FMOD_STUDIO_INSTANCETYPE_BUS = 5,
    FMOD_STUDIO_INSTANCETYPE_VCA = 6,
    FMOD_STUDIO_INSTANCETYPE_BANK = 7,
    FMOD_STUDIO_INSTANCETYPE_COMMANDREPLAY = 8,
    FMOD_STUDIO_INSTANCETYPE_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Copy)]
pub struct FMOD_STUDIO_COMMAND_INFO {
    pub commandName: *const ::std::os::raw::c_char,
    pub parentCommandIndex: ::std::os::raw::c_int,
    pub frameNumber: ::std::os::raw::c_int,
    pub frameTime: ::std::os::raw::c_float,
    pub instanceType: FMOD_STUDIO_INSTANCETYPE,
    pub outputType: FMOD_STUDIO_INSTANCETYPE,
    pub instanceHandle: ::std::os::raw::c_uint,
    pub outputHandle: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for FMOD_STUDIO_COMMAND_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FMOD_STUDIO_COMMAND_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type FMOD_STUDIO_SYSTEM_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(system:
                                                   *mut FMOD_STUDIO_SYSTEM,
                                               _type:
                                                   FMOD_STUDIO_SYSTEM_CALLBACK_TYPE,
                                               commanddata:
                                                   *mut ::std::os::raw::c_void,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_STUDIO_EVENT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(_type:
                                                   FMOD_STUDIO_EVENT_CALLBACK_TYPE,
                                               event:
                                                   *mut FMOD_STUDIO_EVENTINSTANCE,
                                               parameters:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(replay:
                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                               commandIndex:
                                                   ::std::os::raw::c_int,
                                               currentTime:
                                                   ::std::os::raw::c_float,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(replay:
                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                               commandIndex:
                                                   ::std::os::raw::c_int,
                                               bankGuid: *const FMOD_GUID,
                                               bankFilename:
                                                   *const ::std::os::raw::c_char,
                                               flags:
                                                   FMOD_STUDIO_LOAD_BANK_FLAGS,
                                               bank:
                                                   *mut *mut FMOD_STUDIO_BANK,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
pub type FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(replay:
                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                               commandIndex:
                                                   ::std::os::raw::c_int,
                                               eventDescription:
                                                   *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                               instance:
                                                   *mut *mut FMOD_STUDIO_EVENTINSTANCE,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)
                              -> FMOD_RESULT>;
#[cfg_attr(windows, link(name = "fmodstudio64"))]
#[cfg_attr(windows, link(name = "fmod64"))]
#[cfg_attr(not(windows), link(name = "fmodstudio"))]
#[cfg_attr(not(windows), link(name = "fmod"))]
extern "C" {
    pub fn FMOD_Memory_Initialize(poolmem: *mut ::std::os::raw::c_void,
                                  poollen: ::std::os::raw::c_int,
                                  useralloc: FMOD_MEMORY_ALLOC_CALLBACK,
                                  userrealloc: FMOD_MEMORY_REALLOC_CALLBACK,
                                  userfree: FMOD_MEMORY_FREE_CALLBACK,
                                  memtypeflags: FMOD_MEMORY_TYPE)
     -> FMOD_RESULT;
    pub fn FMOD_Memory_GetStats(currentalloced: *mut ::std::os::raw::c_int,
                                maxalloced: *mut ::std::os::raw::c_int,
                                blocking: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Debug_Initialize(flags: FMOD_DEBUG_FLAGS,
                                 mode: FMOD_DEBUG_MODE,
                                 callback: FMOD_DEBUG_CALLBACK,
                                 filename: *const ::std::os::raw::c_char)
     -> FMOD_RESULT;
    pub fn FMOD_File_SetDiskBusy(busy: ::std::os::raw::c_int) -> FMOD_RESULT;
    pub fn FMOD_File_GetDiskBusy(busy: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_Create(system: *mut *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_Release(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_SetOutput(system: *mut FMOD_SYSTEM,
                                 output: FMOD_OUTPUTTYPE) -> FMOD_RESULT;
    pub fn FMOD_System_GetOutput(system: *mut FMOD_SYSTEM,
                                 output: *mut FMOD_OUTPUTTYPE) -> FMOD_RESULT;
    pub fn FMOD_System_GetNumDrivers(system: *mut FMOD_SYSTEM,
                                     numdrivers: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetDriverInfo(system: *mut FMOD_SYSTEM,
                                     id: ::std::os::raw::c_int,
                                     name: *mut ::std::os::raw::c_char,
                                     namelen: ::std::os::raw::c_int,
                                     guid: *mut FMOD_GUID,
                                     systemrate: *mut ::std::os::raw::c_int,
                                     speakermode: *mut FMOD_SPEAKERMODE,
                                     speakermodechannels:
                                         *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetDriver(system: *mut FMOD_SYSTEM,
                                 driver: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetDriver(system: *mut FMOD_SYSTEM,
                                 driver: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetSoftwareChannels(system: *mut FMOD_SYSTEM,
                                           numsoftwarechannels:
                                               ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetSoftwareChannels(system: *mut FMOD_SYSTEM,
                                           numsoftwarechannels:
                                               *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetSoftwareFormat(system: *mut FMOD_SYSTEM,
                                         samplerate: ::std::os::raw::c_int,
                                         speakermode: FMOD_SPEAKERMODE,
                                         numrawspeakers:
                                             ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetSoftwareFormat(system: *mut FMOD_SYSTEM,
                                         samplerate:
                                             *mut ::std::os::raw::c_int,
                                         speakermode: *mut FMOD_SPEAKERMODE,
                                         numrawspeakers:
                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetDSPBufferSize(system: *mut FMOD_SYSTEM,
                                        bufferlength: ::std::os::raw::c_uint,
                                        numbuffers: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetDSPBufferSize(system: *mut FMOD_SYSTEM,
                                        bufferlength:
                                            *mut ::std::os::raw::c_uint,
                                        numbuffers:
                                            *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetFileSystem(system: *mut FMOD_SYSTEM,
                                     useropen: FMOD_FILE_OPEN_CALLBACK,
                                     userclose: FMOD_FILE_CLOSE_CALLBACK,
                                     userread: FMOD_FILE_READ_CALLBACK,
                                     userseek: FMOD_FILE_SEEK_CALLBACK,
                                     userasyncread:
                                         FMOD_FILE_ASYNCREAD_CALLBACK,
                                     userasynccancel:
                                         FMOD_FILE_ASYNCCANCEL_CALLBACK,
                                     blockalign: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_AttachFileSystem(system: *mut FMOD_SYSTEM,
                                        useropen: FMOD_FILE_OPEN_CALLBACK,
                                        userclose: FMOD_FILE_CLOSE_CALLBACK,
                                        userread: FMOD_FILE_READ_CALLBACK,
                                        userseek: FMOD_FILE_SEEK_CALLBACK)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetAdvancedSettings(system: *mut FMOD_SYSTEM,
                                           settings:
                                               *mut FMOD_ADVANCEDSETTINGS)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetAdvancedSettings(system: *mut FMOD_SYSTEM,
                                           settings:
                                               *mut FMOD_ADVANCEDSETTINGS)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetCallback(system: *mut FMOD_SYSTEM,
                                   callback: FMOD_SYSTEM_CALLBACK,
                                   callbackmask: FMOD_SYSTEM_CALLBACK_TYPE)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetPluginPath(system: *mut FMOD_SYSTEM,
                                     path: *const ::std::os::raw::c_char)
     -> FMOD_RESULT;
    pub fn FMOD_System_LoadPlugin(system: *mut FMOD_SYSTEM,
                                  filename: *const ::std::os::raw::c_char,
                                  handle: *mut ::std::os::raw::c_uint,
                                  priority: ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_UnloadPlugin(system: *mut FMOD_SYSTEM,
                                    handle: ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetNumNestedPlugins(system: *mut FMOD_SYSTEM,
                                           handle: ::std::os::raw::c_uint,
                                           count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetNestedPlugin(system: *mut FMOD_SYSTEM,
                                       handle: ::std::os::raw::c_uint,
                                       index: ::std::os::raw::c_int,
                                       nestedhandle:
                                           *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetNumPlugins(system: *mut FMOD_SYSTEM,
                                     plugintype: FMOD_PLUGINTYPE,
                                     numplugins: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetPluginHandle(system: *mut FMOD_SYSTEM,
                                       plugintype: FMOD_PLUGINTYPE,
                                       index: ::std::os::raw::c_int,
                                       handle: *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetPluginInfo(system: *mut FMOD_SYSTEM,
                                     handle: ::std::os::raw::c_uint,
                                     plugintype: *mut FMOD_PLUGINTYPE,
                                     name: *mut ::std::os::raw::c_char,
                                     namelen: ::std::os::raw::c_int,
                                     version: *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetOutputByPlugin(system: *mut FMOD_SYSTEM,
                                         handle: ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetOutputByPlugin(system: *mut FMOD_SYSTEM,
                                         handle: *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_CreateDSPByPlugin(system: *mut FMOD_SYSTEM,
                                         handle: ::std::os::raw::c_uint,
                                         dsp: *mut *mut FMOD_DSP)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetDSPInfoByPlugin(system: *mut FMOD_SYSTEM,
                                          handle: ::std::os::raw::c_uint,
                                          description:
                                              *mut *const FMOD_DSP_DESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_System_RegisterCodec(system: *mut FMOD_SYSTEM,
                                     description: *mut FMOD_CODEC_DESCRIPTION,
                                     handle: *mut ::std::os::raw::c_uint,
                                     priority: ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_RegisterDSP(system: *mut FMOD_SYSTEM,
                                   description: *const FMOD_DSP_DESCRIPTION,
                                   handle: *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_RegisterOutput(system: *mut FMOD_SYSTEM,
                                      description:
                                          *const FMOD_OUTPUT_DESCRIPTION,
                                      handle: *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_Init(system: *mut FMOD_SYSTEM,
                            maxchannels: ::std::os::raw::c_int,
                            flags: FMOD_INITFLAGS,
                            extradriverdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_System_Close(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_Update(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_SetSpeakerPosition(system: *mut FMOD_SYSTEM,
                                          speaker: FMOD_SPEAKER,
                                          x: ::std::os::raw::c_float,
                                          y: ::std::os::raw::c_float,
                                          active: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_System_GetSpeakerPosition(system: *mut FMOD_SYSTEM,
                                          speaker: FMOD_SPEAKER,
                                          x: *mut ::std::os::raw::c_float,
                                          y: *mut ::std::os::raw::c_float,
                                          active: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetStreamBufferSize(system: *mut FMOD_SYSTEM,
                                           filebuffersize:
                                               ::std::os::raw::c_uint,
                                           filebuffersizetype: FMOD_TIMEUNIT)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetStreamBufferSize(system: *mut FMOD_SYSTEM,
                                           filebuffersize:
                                               *mut ::std::os::raw::c_uint,
                                           filebuffersizetype:
                                               *mut FMOD_TIMEUNIT)
     -> FMOD_RESULT;
    pub fn FMOD_System_Set3DSettings(system: *mut FMOD_SYSTEM,
                                     dopplerscale: ::std::os::raw::c_float,
                                     distancefactor: ::std::os::raw::c_float,
                                     rolloffscale: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_System_Get3DSettings(system: *mut FMOD_SYSTEM,
                                     dopplerscale:
                                         *mut ::std::os::raw::c_float,
                                     distancefactor:
                                         *mut ::std::os::raw::c_float,
                                     rolloffscale:
                                         *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_System_Set3DNumListeners(system: *mut FMOD_SYSTEM,
                                         numlisteners: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_Get3DNumListeners(system: *mut FMOD_SYSTEM,
                                         numlisteners:
                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_Set3DListenerAttributes(system: *mut FMOD_SYSTEM,
                                               listener:
                                                   ::std::os::raw::c_int,
                                               pos: *const FMOD_VECTOR,
                                               vel: *const FMOD_VECTOR,
                                               forward: *const FMOD_VECTOR,
                                               up: *const FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_System_Get3DListenerAttributes(system: *mut FMOD_SYSTEM,
                                               listener:
                                                   ::std::os::raw::c_int,
                                               pos: *mut FMOD_VECTOR,
                                               vel: *mut FMOD_VECTOR,
                                               forward: *mut FMOD_VECTOR,
                                               up: *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_System_Set3DRolloffCallback(system: *mut FMOD_SYSTEM,
                                            callback:
                                                FMOD_3D_ROLLOFF_CALLBACK)
     -> FMOD_RESULT;
    pub fn FMOD_System_MixerSuspend(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_MixerResume(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_GetDefaultMixMatrix(system: *mut FMOD_SYSTEM,
                                           sourcespeakermode:
                                               FMOD_SPEAKERMODE,
                                           targetspeakermode:
                                               FMOD_SPEAKERMODE,
                                           matrix:
                                               *mut ::std::os::raw::c_float,
                                           matrixhop: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetSpeakerModeChannels(system: *mut FMOD_SYSTEM,
                                              mode: FMOD_SPEAKERMODE,
                                              channels:
                                                  *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetVersion(system: *mut FMOD_SYSTEM,
                                  version: *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetOutputHandle(system: *mut FMOD_SYSTEM,
                                       handle:
                                           *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetChannelsPlaying(system: *mut FMOD_SYSTEM,
                                          channels:
                                              *mut ::std::os::raw::c_int,
                                          realchannels:
                                              *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetCPUUsage(system: *mut FMOD_SYSTEM,
                                   dsp: *mut ::std::os::raw::c_float,
                                   stream: *mut ::std::os::raw::c_float,
                                   geometry: *mut ::std::os::raw::c_float,
                                   update: *mut ::std::os::raw::c_float,
                                   total: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetFileUsage(system: *mut FMOD_SYSTEM,
                                    sampleBytesRead:
                                        *mut ::std::os::raw::c_longlong,
                                    streamBytesRead:
                                        *mut ::std::os::raw::c_longlong,
                                    otherBytesRead:
                                        *mut ::std::os::raw::c_longlong)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetSoundRAM(system: *mut FMOD_SYSTEM,
                                   currentalloced: *mut ::std::os::raw::c_int,
                                   maxalloced: *mut ::std::os::raw::c_int,
                                   total: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_CreateSound(system: *mut FMOD_SYSTEM,
                                   name_or_data:
                                       *const ::std::os::raw::c_char,
                                   mode: FMOD_MODE,
                                   exinfo: *mut FMOD_CREATESOUNDEXINFO,
                                   sound: *mut *mut FMOD_SOUND)
     -> FMOD_RESULT;
    pub fn FMOD_System_CreateStream(system: *mut FMOD_SYSTEM,
                                    name_or_data:
                                        *const ::std::os::raw::c_char,
                                    mode: FMOD_MODE,
                                    exinfo: *mut FMOD_CREATESOUNDEXINFO,
                                    sound: *mut *mut FMOD_SOUND)
     -> FMOD_RESULT;
    pub fn FMOD_System_CreateDSP(system: *mut FMOD_SYSTEM,
                                 description: *const FMOD_DSP_DESCRIPTION,
                                 dsp: *mut *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_System_CreateDSPByType(system: *mut FMOD_SYSTEM,
                                       _type: FMOD_DSP_TYPE,
                                       dsp: *mut *mut FMOD_DSP)
     -> FMOD_RESULT;
    pub fn FMOD_System_CreateChannelGroup(system: *mut FMOD_SYSTEM,
                                          name: *const ::std::os::raw::c_char,
                                          channelgroup:
                                              *mut *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_System_CreateSoundGroup(system: *mut FMOD_SYSTEM,
                                        name: *const ::std::os::raw::c_char,
                                        soundgroup: *mut *mut FMOD_SOUNDGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_System_CreateReverb3D(system: *mut FMOD_SYSTEM,
                                      reverb: *mut *mut FMOD_REVERB3D)
     -> FMOD_RESULT;
    pub fn FMOD_System_PlaySound(system: *mut FMOD_SYSTEM,
                                 sound: *mut FMOD_SOUND,
                                 channelgroup: *mut FMOD_CHANNELGROUP,
                                 paused: FMOD_BOOL,
                                 channel: *mut *mut FMOD_CHANNEL)
     -> FMOD_RESULT;
    pub fn FMOD_System_PlayDSP(system: *mut FMOD_SYSTEM, dsp: *mut FMOD_DSP,
                               channelgroup: *mut FMOD_CHANNELGROUP,
                               paused: FMOD_BOOL,
                               channel: *mut *mut FMOD_CHANNEL)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetChannel(system: *mut FMOD_SYSTEM,
                                  channelid: ::std::os::raw::c_int,
                                  channel: *mut *mut FMOD_CHANNEL)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetMasterChannelGroup(system: *mut FMOD_SYSTEM,
                                             channelgroup:
                                                 *mut *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetMasterSoundGroup(system: *mut FMOD_SYSTEM,
                                           soundgroup:
                                               *mut *mut FMOD_SOUNDGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_System_AttachChannelGroupToPort(system: *mut FMOD_SYSTEM,
                                                portType: FMOD_PORT_TYPE,
                                                portIndex: FMOD_PORT_INDEX,
                                                channelgroup:
                                                    *mut FMOD_CHANNELGROUP,
                                                passThru: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_System_DetachChannelGroupFromPort(system: *mut FMOD_SYSTEM,
                                                  channelgroup:
                                                      *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetReverbProperties(system: *mut FMOD_SYSTEM,
                                           instance: ::std::os::raw::c_int,
                                           prop:
                                               *const FMOD_REVERB_PROPERTIES)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetReverbProperties(system: *mut FMOD_SYSTEM,
                                           instance: ::std::os::raw::c_int,
                                           prop: *mut FMOD_REVERB_PROPERTIES)
     -> FMOD_RESULT;
    pub fn FMOD_System_LockDSP(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_UnlockDSP(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
    pub fn FMOD_System_GetRecordNumDrivers(system: *mut FMOD_SYSTEM,
                                           numdrivers:
                                               *mut ::std::os::raw::c_int,
                                           numconnected:
                                               *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetRecordDriverInfo(system: *mut FMOD_SYSTEM,
                                           id: ::std::os::raw::c_int,
                                           name: *mut ::std::os::raw::c_char,
                                           namelen: ::std::os::raw::c_int,
                                           guid: *mut FMOD_GUID,
                                           systemrate:
                                               *mut ::std::os::raw::c_int,
                                           speakermode: *mut FMOD_SPEAKERMODE,
                                           speakermodechannels:
                                               *mut ::std::os::raw::c_int,
                                           state: *mut FMOD_DRIVER_STATE)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetRecordPosition(system: *mut FMOD_SYSTEM,
                                         id: ::std::os::raw::c_int,
                                         position:
                                             *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_System_RecordStart(system: *mut FMOD_SYSTEM,
                                   id: ::std::os::raw::c_int,
                                   sound: *mut FMOD_SOUND, _loop: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_System_RecordStop(system: *mut FMOD_SYSTEM,
                                  id: ::std::os::raw::c_int) -> FMOD_RESULT;
    pub fn FMOD_System_IsRecording(system: *mut FMOD_SYSTEM,
                                   id: ::std::os::raw::c_int,
                                   recording: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_System_CreateGeometry(system: *mut FMOD_SYSTEM,
                                      maxpolygons: ::std::os::raw::c_int,
                                      maxvertices: ::std::os::raw::c_int,
                                      geometry: *mut *mut FMOD_GEOMETRY)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetGeometrySettings(system: *mut FMOD_SYSTEM,
                                           maxworldsize:
                                               ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetGeometrySettings(system: *mut FMOD_SYSTEM,
                                           maxworldsize:
                                               *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_System_LoadGeometry(system: *mut FMOD_SYSTEM,
                                    data: *const ::std::os::raw::c_void,
                                    datasize: ::std::os::raw::c_int,
                                    geometry: *mut *mut FMOD_GEOMETRY)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetGeometryOcclusion(system: *mut FMOD_SYSTEM,
                                            listener: *const FMOD_VECTOR,
                                            source: *const FMOD_VECTOR,
                                            direct:
                                                *mut ::std::os::raw::c_float,
                                            reverb:
                                                *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetNetworkProxy(system: *mut FMOD_SYSTEM,
                                       proxy: *const ::std::os::raw::c_char)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetNetworkProxy(system: *mut FMOD_SYSTEM,
                                       proxy: *mut ::std::os::raw::c_char,
                                       proxylen: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetNetworkTimeout(system: *mut FMOD_SYSTEM,
                                         timeout: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetNetworkTimeout(system: *mut FMOD_SYSTEM,
                                         timeout: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_System_SetUserData(system: *mut FMOD_SYSTEM,
                                   userdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_System_GetUserData(system: *mut FMOD_SYSTEM,
                                   userdata: *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Release(sound: *mut FMOD_SOUND) -> FMOD_RESULT;
    pub fn FMOD_Sound_GetSystemObject(sound: *mut FMOD_SOUND,
                                      system: *mut *mut FMOD_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Lock(sound: *mut FMOD_SOUND,
                           offset: ::std::os::raw::c_uint,
                           length: ::std::os::raw::c_uint,
                           ptr1: *mut *mut ::std::os::raw::c_void,
                           ptr2: *mut *mut ::std::os::raw::c_void,
                           len1: *mut ::std::os::raw::c_uint,
                           len2: *mut ::std::os::raw::c_uint) -> FMOD_RESULT;
    pub fn FMOD_Sound_Unlock(sound: *mut FMOD_SOUND,
                             ptr1: *mut ::std::os::raw::c_void,
                             ptr2: *mut ::std::os::raw::c_void,
                             len1: ::std::os::raw::c_uint,
                             len2: ::std::os::raw::c_uint) -> FMOD_RESULT;
    pub fn FMOD_Sound_SetDefaults(sound: *mut FMOD_SOUND,
                                  frequency: ::std::os::raw::c_float,
                                  priority: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetDefaults(sound: *mut FMOD_SOUND,
                                  frequency: *mut ::std::os::raw::c_float,
                                  priority: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Set3DMinMaxDistance(sound: *mut FMOD_SOUND,
                                          min: ::std::os::raw::c_float,
                                          max: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Get3DMinMaxDistance(sound: *mut FMOD_SOUND,
                                          min: *mut ::std::os::raw::c_float,
                                          max: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Set3DConeSettings(sound: *mut FMOD_SOUND,
                                        insideconeangle:
                                            ::std::os::raw::c_float,
                                        outsideconeangle:
                                            ::std::os::raw::c_float,
                                        outsidevolume:
                                            ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Get3DConeSettings(sound: *mut FMOD_SOUND,
                                        insideconeangle:
                                            *mut ::std::os::raw::c_float,
                                        outsideconeangle:
                                            *mut ::std::os::raw::c_float,
                                        outsidevolume:
                                            *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Set3DCustomRolloff(sound: *mut FMOD_SOUND,
                                         points: *mut FMOD_VECTOR,
                                         numpoints: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_Get3DCustomRolloff(sound: *mut FMOD_SOUND,
                                         points: *mut *mut FMOD_VECTOR,
                                         numpoints:
                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetSubSound(sound: *mut FMOD_SOUND,
                                  index: ::std::os::raw::c_int,
                                  subsound: *mut *mut FMOD_SOUND)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetSubSoundParent(sound: *mut FMOD_SOUND,
                                        parentsound: *mut *mut FMOD_SOUND)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetName(sound: *mut FMOD_SOUND,
                              name: *mut ::std::os::raw::c_char,
                              namelen: ::std::os::raw::c_int) -> FMOD_RESULT;
    pub fn FMOD_Sound_GetLength(sound: *mut FMOD_SOUND,
                                length: *mut ::std::os::raw::c_uint,
                                lengthtype: FMOD_TIMEUNIT) -> FMOD_RESULT;
    pub fn FMOD_Sound_GetFormat(sound: *mut FMOD_SOUND,
                                _type: *mut FMOD_SOUND_TYPE,
                                format: *mut FMOD_SOUND_FORMAT,
                                channels: *mut ::std::os::raw::c_int,
                                bits: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetNumSubSounds(sound: *mut FMOD_SOUND,
                                      numsubsounds:
                                          *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetNumTags(sound: *mut FMOD_SOUND,
                                 numtags: *mut ::std::os::raw::c_int,
                                 numtagsupdated: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetTag(sound: *mut FMOD_SOUND,
                             name: *const ::std::os::raw::c_char,
                             index: ::std::os::raw::c_int, tag: *mut FMOD_TAG)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetOpenState(sound: *mut FMOD_SOUND,
                                   openstate: *mut FMOD_OPENSTATE,
                                   percentbuffered:
                                       *mut ::std::os::raw::c_uint,
                                   starving: *mut FMOD_BOOL,
                                   diskbusy: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Sound_ReadData(sound: *mut FMOD_SOUND,
                               buffer: *mut ::std::os::raw::c_void,
                               lenbytes: ::std::os::raw::c_uint,
                               read: *mut ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_SeekData(sound: *mut FMOD_SOUND,
                               pcm: ::std::os::raw::c_uint) -> FMOD_RESULT;
    pub fn FMOD_Sound_SetSoundGroup(sound: *mut FMOD_SOUND,
                                    soundgroup: *mut FMOD_SOUNDGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetSoundGroup(sound: *mut FMOD_SOUND,
                                    soundgroup: *mut *mut FMOD_SOUNDGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetNumSyncPoints(sound: *mut FMOD_SOUND,
                                       numsyncpoints:
                                           *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetSyncPoint(sound: *mut FMOD_SOUND,
                                   index: ::std::os::raw::c_int,
                                   point: *mut *mut FMOD_SYNCPOINT)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetSyncPointInfo(sound: *mut FMOD_SOUND,
                                       point: *mut FMOD_SYNCPOINT,
                                       name: *mut ::std::os::raw::c_char,
                                       namelen: ::std::os::raw::c_int,
                                       offset: *mut ::std::os::raw::c_uint,
                                       offsettype: FMOD_TIMEUNIT)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_AddSyncPoint(sound: *mut FMOD_SOUND,
                                   offset: ::std::os::raw::c_uint,
                                   offsettype: FMOD_TIMEUNIT,
                                   name: *const ::std::os::raw::c_char,
                                   point: *mut *mut FMOD_SYNCPOINT)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_DeleteSyncPoint(sound: *mut FMOD_SOUND,
                                      point: *mut FMOD_SYNCPOINT)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_SetMode(sound: *mut FMOD_SOUND, mode: FMOD_MODE)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetMode(sound: *mut FMOD_SOUND, mode: *mut FMOD_MODE)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_SetLoopCount(sound: *mut FMOD_SOUND,
                                   loopcount: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetLoopCount(sound: *mut FMOD_SOUND,
                                   loopcount: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_SetLoopPoints(sound: *mut FMOD_SOUND,
                                    loopstart: ::std::os::raw::c_uint,
                                    loopstarttype: FMOD_TIMEUNIT,
                                    loopend: ::std::os::raw::c_uint,
                                    loopendtype: FMOD_TIMEUNIT)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetLoopPoints(sound: *mut FMOD_SOUND,
                                    loopstart: *mut ::std::os::raw::c_uint,
                                    loopstarttype: FMOD_TIMEUNIT,
                                    loopend: *mut ::std::os::raw::c_uint,
                                    loopendtype: FMOD_TIMEUNIT)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetMusicNumChannels(sound: *mut FMOD_SOUND,
                                          numchannels:
                                              *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_SetMusicChannelVolume(sound: *mut FMOD_SOUND,
                                            channel: ::std::os::raw::c_int,
                                            volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetMusicChannelVolume(sound: *mut FMOD_SOUND,
                                            channel: ::std::os::raw::c_int,
                                            volume:
                                                *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_SetMusicSpeed(sound: *mut FMOD_SOUND,
                                    speed: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetMusicSpeed(sound: *mut FMOD_SOUND,
                                    speed: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_SetUserData(sound: *mut FMOD_SOUND,
                                  userdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Sound_GetUserData(sound: *mut FMOD_SOUND,
                                  userdata: *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetSystemObject(channel: *mut FMOD_CHANNEL,
                                        system: *mut *mut FMOD_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Stop(channel: *mut FMOD_CHANNEL) -> FMOD_RESULT;
    pub fn FMOD_Channel_SetPaused(channel: *mut FMOD_CHANNEL,
                                  paused: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_GetPaused(channel: *mut FMOD_CHANNEL,
                                  paused: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_SetVolume(channel: *mut FMOD_CHANNEL,
                                  volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetVolume(channel: *mut FMOD_CHANNEL,
                                  volume: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetVolumeRamp(channel: *mut FMOD_CHANNEL,
                                      ramp: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_GetVolumeRamp(channel: *mut FMOD_CHANNEL,
                                      ramp: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_GetAudibility(channel: *mut FMOD_CHANNEL,
                                      audibility:
                                          *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetPitch(channel: *mut FMOD_CHANNEL,
                                 pitch: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetPitch(channel: *mut FMOD_CHANNEL,
                                 pitch: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetMute(channel: *mut FMOD_CHANNEL, mute: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetMute(channel: *mut FMOD_CHANNEL,
                                mute: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_SetReverbProperties(channel: *mut FMOD_CHANNEL,
                                            instance: ::std::os::raw::c_int,
                                            wet: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetReverbProperties(channel: *mut FMOD_CHANNEL,
                                            instance: ::std::os::raw::c_int,
                                            wet: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetLowPassGain(channel: *mut FMOD_CHANNEL,
                                       gain: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetLowPassGain(channel: *mut FMOD_CHANNEL,
                                       gain: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetMode(channel: *mut FMOD_CHANNEL, mode: FMOD_MODE)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetMode(channel: *mut FMOD_CHANNEL,
                                mode: *mut FMOD_MODE) -> FMOD_RESULT;
    pub fn FMOD_Channel_SetCallback(channel: *mut FMOD_CHANNEL,
                                    callback: FMOD_CHANNELCONTROL_CALLBACK)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_IsPlaying(channel: *mut FMOD_CHANNEL,
                                  isplaying: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_SetPan(channel: *mut FMOD_CHANNEL,
                               pan: ::std::os::raw::c_float) -> FMOD_RESULT;
    pub fn FMOD_Channel_SetMixLevelsOutput(channel: *mut FMOD_CHANNEL,
                                           frontleft: ::std::os::raw::c_float,
                                           frontright:
                                               ::std::os::raw::c_float,
                                           center: ::std::os::raw::c_float,
                                           lfe: ::std::os::raw::c_float,
                                           surroundleft:
                                               ::std::os::raw::c_float,
                                           surroundright:
                                               ::std::os::raw::c_float,
                                           backleft: ::std::os::raw::c_float,
                                           backright: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetMixLevelsInput(channel: *mut FMOD_CHANNEL,
                                          levels:
                                              *mut ::std::os::raw::c_float,
                                          numlevels: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetMixMatrix(channel: *mut FMOD_CHANNEL,
                                     matrix: *mut ::std::os::raw::c_float,
                                     outchannels: ::std::os::raw::c_int,
                                     inchannels: ::std::os::raw::c_int,
                                     inchannel_hop: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetMixMatrix(channel: *mut FMOD_CHANNEL,
                                     matrix: *mut ::std::os::raw::c_float,
                                     outchannels: *mut ::std::os::raw::c_int,
                                     inchannels: *mut ::std::os::raw::c_int,
                                     inchannel_hop: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetDSPClock(channel: *mut FMOD_CHANNEL,
                                    dspclock:
                                        *mut ::std::os::raw::c_ulonglong,
                                    parentclock:
                                        *mut ::std::os::raw::c_ulonglong)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetDelay(channel: *mut FMOD_CHANNEL,
                                 dspclock_start: ::std::os::raw::c_ulonglong,
                                 dspclock_end: ::std::os::raw::c_ulonglong,
                                 stopchannels: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_GetDelay(channel: *mut FMOD_CHANNEL,
                                 dspclock_start:
                                     *mut ::std::os::raw::c_ulonglong,
                                 dspclock_end:
                                     *mut ::std::os::raw::c_ulonglong,
                                 stopchannels: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_AddFadePoint(channel: *mut FMOD_CHANNEL,
                                     dspclock: ::std::os::raw::c_ulonglong,
                                     volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetFadePointRamp(channel: *mut FMOD_CHANNEL,
                                         dspclock:
                                             ::std::os::raw::c_ulonglong,
                                         volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_RemoveFadePoints(channel: *mut FMOD_CHANNEL,
                                         dspclock_start:
                                             ::std::os::raw::c_ulonglong,
                                         dspclock_end:
                                             ::std::os::raw::c_ulonglong)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetFadePoints(channel: *mut FMOD_CHANNEL,
                                      numpoints: *mut ::std::os::raw::c_uint,
                                      point_dspclock:
                                          *mut ::std::os::raw::c_ulonglong,
                                      point_volume:
                                          *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetDSP(channel: *mut FMOD_CHANNEL,
                               index: ::std::os::raw::c_int,
                               dsp: *mut *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_Channel_AddDSP(channel: *mut FMOD_CHANNEL,
                               index: ::std::os::raw::c_int,
                               dsp: *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_Channel_RemoveDSP(channel: *mut FMOD_CHANNEL,
                                  dsp: *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_Channel_GetNumDSPs(channel: *mut FMOD_CHANNEL,
                                   numdsps: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetDSPIndex(channel: *mut FMOD_CHANNEL,
                                    dsp: *mut FMOD_DSP,
                                    index: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetDSPIndex(channel: *mut FMOD_CHANNEL,
                                    dsp: *mut FMOD_DSP,
                                    index: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_OverridePanDSP(channel: *mut FMOD_CHANNEL,
                                       pan: *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DAttributes(channel: *mut FMOD_CHANNEL,
                                        pos: *const FMOD_VECTOR,
                                        vel: *const FMOD_VECTOR,
                                        alt_pan_pos: *const FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DAttributes(channel: *mut FMOD_CHANNEL,
                                        pos: *mut FMOD_VECTOR,
                                        vel: *mut FMOD_VECTOR,
                                        alt_pan_pos: *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DMinMaxDistance(channel: *mut FMOD_CHANNEL,
                                            mindistance:
                                                ::std::os::raw::c_float,
                                            maxdistance:
                                                ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DMinMaxDistance(channel: *mut FMOD_CHANNEL,
                                            mindistance:
                                                *mut ::std::os::raw::c_float,
                                            maxdistance:
                                                *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DConeSettings(channel: *mut FMOD_CHANNEL,
                                          insideconeangle:
                                              ::std::os::raw::c_float,
                                          outsideconeangle:
                                              ::std::os::raw::c_float,
                                          outsidevolume:
                                              ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DConeSettings(channel: *mut FMOD_CHANNEL,
                                          insideconeangle:
                                              *mut ::std::os::raw::c_float,
                                          outsideconeangle:
                                              *mut ::std::os::raw::c_float,
                                          outsidevolume:
                                              *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DConeOrientation(channel: *mut FMOD_CHANNEL,
                                             orientation: *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DConeOrientation(channel: *mut FMOD_CHANNEL,
                                             orientation: *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DCustomRolloff(channel: *mut FMOD_CHANNEL,
                                           points: *mut FMOD_VECTOR,
                                           numpoints: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DCustomRolloff(channel: *mut FMOD_CHANNEL,
                                           points: *mut *mut FMOD_VECTOR,
                                           numpoints:
                                               *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DOcclusion(channel: *mut FMOD_CHANNEL,
                                       directocclusion:
                                           ::std::os::raw::c_float,
                                       reverbocclusion:
                                           ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DOcclusion(channel: *mut FMOD_CHANNEL,
                                       directocclusion:
                                           *mut ::std::os::raw::c_float,
                                       reverbocclusion:
                                           *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DSpread(channel: *mut FMOD_CHANNEL,
                                    angle: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DSpread(channel: *mut FMOD_CHANNEL,
                                    angle: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DLevel(channel: *mut FMOD_CHANNEL,
                                   level: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DLevel(channel: *mut FMOD_CHANNEL,
                                   level: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DDopplerLevel(channel: *mut FMOD_CHANNEL,
                                          level: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DDopplerLevel(channel: *mut FMOD_CHANNEL,
                                          level: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Set3DDistanceFilter(channel: *mut FMOD_CHANNEL,
                                            custom: FMOD_BOOL,
                                            customLevel:
                                                ::std::os::raw::c_float,
                                            centerFreq:
                                                ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_Get3DDistanceFilter(channel: *mut FMOD_CHANNEL,
                                            custom: *mut FMOD_BOOL,
                                            customLevel:
                                                *mut ::std::os::raw::c_float,
                                            centerFreq:
                                                *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetUserData(channel: *mut FMOD_CHANNEL,
                                    userdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetUserData(channel: *mut FMOD_CHANNEL,
                                    userdata:
                                        *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetFrequency(channel: *mut FMOD_CHANNEL,
                                     frequency: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetFrequency(channel: *mut FMOD_CHANNEL,
                                     frequency: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetPriority(channel: *mut FMOD_CHANNEL,
                                    priority: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetPriority(channel: *mut FMOD_CHANNEL,
                                    priority: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetPosition(channel: *mut FMOD_CHANNEL,
                                    position: ::std::os::raw::c_uint,
                                    postype: FMOD_TIMEUNIT) -> FMOD_RESULT;
    pub fn FMOD_Channel_GetPosition(channel: *mut FMOD_CHANNEL,
                                    position: *mut ::std::os::raw::c_uint,
                                    postype: FMOD_TIMEUNIT) -> FMOD_RESULT;
    pub fn FMOD_Channel_SetChannelGroup(channel: *mut FMOD_CHANNEL,
                                        channelgroup: *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetChannelGroup(channel: *mut FMOD_CHANNEL,
                                        channelgroup:
                                            *mut *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetLoopCount(channel: *mut FMOD_CHANNEL,
                                     loopcount: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetLoopCount(channel: *mut FMOD_CHANNEL,
                                     loopcount: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_SetLoopPoints(channel: *mut FMOD_CHANNEL,
                                      loopstart: ::std::os::raw::c_uint,
                                      loopstarttype: FMOD_TIMEUNIT,
                                      loopend: ::std::os::raw::c_uint,
                                      loopendtype: FMOD_TIMEUNIT)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetLoopPoints(channel: *mut FMOD_CHANNEL,
                                      loopstart: *mut ::std::os::raw::c_uint,
                                      loopstarttype: FMOD_TIMEUNIT,
                                      loopend: *mut ::std::os::raw::c_uint,
                                      loopendtype: FMOD_TIMEUNIT)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_IsVirtual(channel: *mut FMOD_CHANNEL,
                                  isvirtual: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Channel_GetCurrentSound(channel: *mut FMOD_CHANNEL,
                                        sound: *mut *mut FMOD_SOUND)
     -> FMOD_RESULT;
    pub fn FMOD_Channel_GetIndex(channel: *mut FMOD_CHANNEL,
                                 index: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetSystemObject(channelgroup:
                                                 *mut FMOD_CHANNELGROUP,
                                             system: *mut *mut FMOD_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Stop(channelgroup: *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetPaused(channelgroup: *mut FMOD_CHANNELGROUP,
                                       paused: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetPaused(channelgroup: *mut FMOD_CHANNELGROUP,
                                       paused: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetVolume(channelgroup: *mut FMOD_CHANNELGROUP,
                                       volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetVolume(channelgroup: *mut FMOD_CHANNELGROUP,
                                       volume: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetVolumeRamp(channelgroup:
                                               *mut FMOD_CHANNELGROUP,
                                           ramp: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetVolumeRamp(channelgroup:
                                               *mut FMOD_CHANNELGROUP,
                                           ramp: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetAudibility(channelgroup:
                                               *mut FMOD_CHANNELGROUP,
                                           audibility:
                                               *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetPitch(channelgroup: *mut FMOD_CHANNELGROUP,
                                      pitch: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetPitch(channelgroup: *mut FMOD_CHANNELGROUP,
                                      pitch: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetMute(channelgroup: *mut FMOD_CHANNELGROUP,
                                     mute: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetMute(channelgroup: *mut FMOD_CHANNELGROUP,
                                     mute: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetReverbProperties(channelgroup:
                                                     *mut FMOD_CHANNELGROUP,
                                                 instance:
                                                     ::std::os::raw::c_int,
                                                 wet: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetReverbProperties(channelgroup:
                                                     *mut FMOD_CHANNELGROUP,
                                                 instance:
                                                     ::std::os::raw::c_int,
                                                 wet:
                                                     *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetLowPassGain(channelgroup:
                                                *mut FMOD_CHANNELGROUP,
                                            gain: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetLowPassGain(channelgroup:
                                                *mut FMOD_CHANNELGROUP,
                                            gain:
                                                *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetMode(channelgroup: *mut FMOD_CHANNELGROUP,
                                     mode: FMOD_MODE) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetMode(channelgroup: *mut FMOD_CHANNELGROUP,
                                     mode: *mut FMOD_MODE) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetCallback(channelgroup: *mut FMOD_CHANNELGROUP,
                                         callback:
                                             FMOD_CHANNELCONTROL_CALLBACK)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_IsPlaying(channelgroup: *mut FMOD_CHANNELGROUP,
                                       isplaying: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetPan(channelgroup: *mut FMOD_CHANNELGROUP,
                                    pan: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetMixLevelsOutput(channelgroup:
                                                    *mut FMOD_CHANNELGROUP,
                                                frontleft:
                                                    ::std::os::raw::c_float,
                                                frontright:
                                                    ::std::os::raw::c_float,
                                                center:
                                                    ::std::os::raw::c_float,
                                                lfe: ::std::os::raw::c_float,
                                                surroundleft:
                                                    ::std::os::raw::c_float,
                                                surroundright:
                                                    ::std::os::raw::c_float,
                                                backleft:
                                                    ::std::os::raw::c_float,
                                                backright:
                                                    ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetMixLevelsInput(channelgroup:
                                                   *mut FMOD_CHANNELGROUP,
                                               levels:
                                                   *mut ::std::os::raw::c_float,
                                               numlevels:
                                                   ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetMixMatrix(channelgroup:
                                              *mut FMOD_CHANNELGROUP,
                                          matrix:
                                              *mut ::std::os::raw::c_float,
                                          outchannels: ::std::os::raw::c_int,
                                          inchannels: ::std::os::raw::c_int,
                                          inchannel_hop:
                                              ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetMixMatrix(channelgroup:
                                              *mut FMOD_CHANNELGROUP,
                                          matrix:
                                              *mut ::std::os::raw::c_float,
                                          outchannels:
                                              *mut ::std::os::raw::c_int,
                                          inchannels:
                                              *mut ::std::os::raw::c_int,
                                          inchannel_hop:
                                              ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetDSPClock(channelgroup: *mut FMOD_CHANNELGROUP,
                                         dspclock:
                                             *mut ::std::os::raw::c_ulonglong,
                                         parentclock:
                                             *mut ::std::os::raw::c_ulonglong)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetDelay(channelgroup: *mut FMOD_CHANNELGROUP,
                                      dspclock_start:
                                          ::std::os::raw::c_ulonglong,
                                      dspclock_end:
                                          ::std::os::raw::c_ulonglong,
                                      stopchannels: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetDelay(channelgroup: *mut FMOD_CHANNELGROUP,
                                      dspclock_start:
                                          *mut ::std::os::raw::c_ulonglong,
                                      dspclock_end:
                                          *mut ::std::os::raw::c_ulonglong,
                                      stopchannels: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_AddFadePoint(channelgroup:
                                              *mut FMOD_CHANNELGROUP,
                                          dspclock:
                                              ::std::os::raw::c_ulonglong,
                                          volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetFadePointRamp(channelgroup:
                                                  *mut FMOD_CHANNELGROUP,
                                              dspclock:
                                                  ::std::os::raw::c_ulonglong,
                                              volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_RemoveFadePoints(channelgroup:
                                                  *mut FMOD_CHANNELGROUP,
                                              dspclock_start:
                                                  ::std::os::raw::c_ulonglong,
                                              dspclock_end:
                                                  ::std::os::raw::c_ulonglong)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetFadePoints(channelgroup:
                                               *mut FMOD_CHANNELGROUP,
                                           numpoints:
                                               *mut ::std::os::raw::c_uint,
                                           point_dspclock:
                                               *mut ::std::os::raw::c_ulonglong,
                                           point_volume:
                                               *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetDSP(channelgroup: *mut FMOD_CHANNELGROUP,
                                    index: ::std::os::raw::c_int,
                                    dsp: *mut *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_AddDSP(channelgroup: *mut FMOD_CHANNELGROUP,
                                    index: ::std::os::raw::c_int,
                                    dsp: *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_RemoveDSP(channelgroup: *mut FMOD_CHANNELGROUP,
                                       dsp: *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetNumDSPs(channelgroup: *mut FMOD_CHANNELGROUP,
                                        numdsps: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetDSPIndex(channelgroup: *mut FMOD_CHANNELGROUP,
                                         dsp: *mut FMOD_DSP,
                                         index: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetDSPIndex(channelgroup: *mut FMOD_CHANNELGROUP,
                                         dsp: *mut FMOD_DSP,
                                         index: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_OverridePanDSP(channelgroup:
                                                *mut FMOD_CHANNELGROUP,
                                            pan: *mut FMOD_DSP)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DAttributes(channelgroup:
                                                 *mut FMOD_CHANNELGROUP,
                                             pos: *const FMOD_VECTOR,
                                             vel: *const FMOD_VECTOR,
                                             alt_pan_pos: *const FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DAttributes(channelgroup:
                                                 *mut FMOD_CHANNELGROUP,
                                             pos: *mut FMOD_VECTOR,
                                             vel: *mut FMOD_VECTOR,
                                             alt_pan_pos: *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DMinMaxDistance(channelgroup:
                                                     *mut FMOD_CHANNELGROUP,
                                                 mindistance:
                                                     ::std::os::raw::c_float,
                                                 maxdistance:
                                                     ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DMinMaxDistance(channelgroup:
                                                     *mut FMOD_CHANNELGROUP,
                                                 mindistance:
                                                     *mut ::std::os::raw::c_float,
                                                 maxdistance:
                                                     *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DConeSettings(channelgroup:
                                                   *mut FMOD_CHANNELGROUP,
                                               insideconeangle:
                                                   ::std::os::raw::c_float,
                                               outsideconeangle:
                                                   ::std::os::raw::c_float,
                                               outsidevolume:
                                                   ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DConeSettings(channelgroup:
                                                   *mut FMOD_CHANNELGROUP,
                                               insideconeangle:
                                                   *mut ::std::os::raw::c_float,
                                               outsideconeangle:
                                                   *mut ::std::os::raw::c_float,
                                               outsidevolume:
                                                   *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DConeOrientation(channelgroup:
                                                      *mut FMOD_CHANNELGROUP,
                                                  orientation:
                                                      *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DConeOrientation(channelgroup:
                                                      *mut FMOD_CHANNELGROUP,
                                                  orientation:
                                                      *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DCustomRolloff(channelgroup:
                                                    *mut FMOD_CHANNELGROUP,
                                                points: *mut FMOD_VECTOR,
                                                numpoints:
                                                    ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DCustomRolloff(channelgroup:
                                                    *mut FMOD_CHANNELGROUP,
                                                points: *mut *mut FMOD_VECTOR,
                                                numpoints:
                                                    *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DOcclusion(channelgroup:
                                                *mut FMOD_CHANNELGROUP,
                                            directocclusion:
                                                ::std::os::raw::c_float,
                                            reverbocclusion:
                                                ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DOcclusion(channelgroup:
                                                *mut FMOD_CHANNELGROUP,
                                            directocclusion:
                                                *mut ::std::os::raw::c_float,
                                            reverbocclusion:
                                                *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DSpread(channelgroup: *mut FMOD_CHANNELGROUP,
                                         angle: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DSpread(channelgroup: *mut FMOD_CHANNELGROUP,
                                         angle: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DLevel(channelgroup: *mut FMOD_CHANNELGROUP,
                                        level: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DLevel(channelgroup: *mut FMOD_CHANNELGROUP,
                                        level: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DDopplerLevel(channelgroup:
                                                   *mut FMOD_CHANNELGROUP,
                                               level: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DDopplerLevel(channelgroup:
                                                   *mut FMOD_CHANNELGROUP,
                                               level:
                                                   *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Set3DDistanceFilter(channelgroup:
                                                     *mut FMOD_CHANNELGROUP,
                                                 custom: FMOD_BOOL,
                                                 customLevel:
                                                     ::std::os::raw::c_float,
                                                 centerFreq:
                                                     ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Get3DDistanceFilter(channelgroup:
                                                     *mut FMOD_CHANNELGROUP,
                                                 custom: *mut FMOD_BOOL,
                                                 customLevel:
                                                     *mut ::std::os::raw::c_float,
                                                 centerFreq:
                                                     *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_SetUserData(channelgroup: *mut FMOD_CHANNELGROUP,
                                         userdata:
                                             *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetUserData(channelgroup: *mut FMOD_CHANNELGROUP,
                                         userdata:
                                             *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_Release(channelgroup: *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_AddGroup(channelgroup: *mut FMOD_CHANNELGROUP,
                                      group: *mut FMOD_CHANNELGROUP,
                                      propagatedspclock: FMOD_BOOL,
                                      connection:
                                          *mut *mut FMOD_DSPCONNECTION)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetNumGroups(channelgroup:
                                              *mut FMOD_CHANNELGROUP,
                                          numgroups:
                                              *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetGroup(channelgroup: *mut FMOD_CHANNELGROUP,
                                      index: ::std::os::raw::c_int,
                                      group: *mut *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetParentGroup(channelgroup:
                                                *mut FMOD_CHANNELGROUP,
                                            group:
                                                *mut *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetName(channelgroup: *mut FMOD_CHANNELGROUP,
                                     name: *mut ::std::os::raw::c_char,
                                     namelen: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetNumChannels(channelgroup:
                                                *mut FMOD_CHANNELGROUP,
                                            numchannels:
                                                *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_ChannelGroup_GetChannel(channelgroup: *mut FMOD_CHANNELGROUP,
                                        index: ::std::os::raw::c_int,
                                        channel: *mut *mut FMOD_CHANNEL)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_Release(soundgroup: *mut FMOD_SOUNDGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetSystemObject(soundgroup: *mut FMOD_SOUNDGROUP,
                                           system: *mut *mut FMOD_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_SetMaxAudible(soundgroup: *mut FMOD_SOUNDGROUP,
                                         maxaudible: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetMaxAudible(soundgroup: *mut FMOD_SOUNDGROUP,
                                         maxaudible:
                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_SetMaxAudibleBehavior(soundgroup:
                                                     *mut FMOD_SOUNDGROUP,
                                                 behavior:
                                                     FMOD_SOUNDGROUP_BEHAVIOR)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetMaxAudibleBehavior(soundgroup:
                                                     *mut FMOD_SOUNDGROUP,
                                                 behavior:
                                                     *mut FMOD_SOUNDGROUP_BEHAVIOR)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_SetMuteFadeSpeed(soundgroup: *mut FMOD_SOUNDGROUP,
                                            speed: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetMuteFadeSpeed(soundgroup: *mut FMOD_SOUNDGROUP,
                                            speed:
                                                *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_SetVolume(soundgroup: *mut FMOD_SOUNDGROUP,
                                     volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetVolume(soundgroup: *mut FMOD_SOUNDGROUP,
                                     volume: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_Stop(soundgroup: *mut FMOD_SOUNDGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetName(soundgroup: *mut FMOD_SOUNDGROUP,
                                   name: *mut ::std::os::raw::c_char,
                                   namelen: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetNumSounds(soundgroup: *mut FMOD_SOUNDGROUP,
                                        numsounds: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetSound(soundgroup: *mut FMOD_SOUNDGROUP,
                                    index: ::std::os::raw::c_int,
                                    sound: *mut *mut FMOD_SOUND)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetNumPlaying(soundgroup: *mut FMOD_SOUNDGROUP,
                                         numplaying:
                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_SetUserData(soundgroup: *mut FMOD_SOUNDGROUP,
                                       userdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_SoundGroup_GetUserData(soundgroup: *mut FMOD_SOUNDGROUP,
                                       userdata:
                                           *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_Release(dsp: *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_DSP_GetSystemObject(dsp: *mut FMOD_DSP,
                                    system: *mut *mut FMOD_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_AddInput(dsp: *mut FMOD_DSP, input: *mut FMOD_DSP,
                             connection: *mut *mut FMOD_DSPCONNECTION,
                             _type: FMOD_DSPCONNECTION_TYPE) -> FMOD_RESULT;
    pub fn FMOD_DSP_DisconnectFrom(dsp: *mut FMOD_DSP, target: *mut FMOD_DSP,
                                   connection: *mut FMOD_DSPCONNECTION)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_DisconnectAll(dsp: *mut FMOD_DSP, inputs: FMOD_BOOL,
                                  outputs: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_DSP_GetNumInputs(dsp: *mut FMOD_DSP,
                                 numinputs: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetNumOutputs(dsp: *mut FMOD_DSP,
                                  numoutputs: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetInput(dsp: *mut FMOD_DSP, index: ::std::os::raw::c_int,
                             input: *mut *mut FMOD_DSP,
                             inputconnection: *mut *mut FMOD_DSPCONNECTION)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetOutput(dsp: *mut FMOD_DSP,
                              index: ::std::os::raw::c_int,
                              output: *mut *mut FMOD_DSP,
                              outputconnection: *mut *mut FMOD_DSPCONNECTION)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetActive(dsp: *mut FMOD_DSP, active: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetActive(dsp: *mut FMOD_DSP, active: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetBypass(dsp: *mut FMOD_DSP, bypass: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetBypass(dsp: *mut FMOD_DSP, bypass: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetWetDryMix(dsp: *mut FMOD_DSP,
                                 prewet: ::std::os::raw::c_float,
                                 postwet: ::std::os::raw::c_float,
                                 dry: ::std::os::raw::c_float) -> FMOD_RESULT;
    pub fn FMOD_DSP_GetWetDryMix(dsp: *mut FMOD_DSP,
                                 prewet: *mut ::std::os::raw::c_float,
                                 postwet: *mut ::std::os::raw::c_float,
                                 dry: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetChannelFormat(dsp: *mut FMOD_DSP,
                                     channelmask: FMOD_CHANNELMASK,
                                     numchannels: ::std::os::raw::c_int,
                                     source_speakermode: FMOD_SPEAKERMODE)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetChannelFormat(dsp: *mut FMOD_DSP,
                                     channelmask: *mut FMOD_CHANNELMASK,
                                     numchannels: *mut ::std::os::raw::c_int,
                                     source_speakermode:
                                         *mut FMOD_SPEAKERMODE)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetOutputChannelFormat(dsp: *mut FMOD_DSP,
                                           inmask: FMOD_CHANNELMASK,
                                           inchannels: ::std::os::raw::c_int,
                                           inspeakermode: FMOD_SPEAKERMODE,
                                           outmask: *mut FMOD_CHANNELMASK,
                                           outchannels:
                                               *mut ::std::os::raw::c_int,
                                           outspeakermode:
                                               *mut FMOD_SPEAKERMODE)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_Reset(dsp: *mut FMOD_DSP) -> FMOD_RESULT;
    pub fn FMOD_DSP_SetParameterFloat(dsp: *mut FMOD_DSP,
                                      index: ::std::os::raw::c_int,
                                      value: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetParameterInt(dsp: *mut FMOD_DSP,
                                    index: ::std::os::raw::c_int,
                                    value: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetParameterBool(dsp: *mut FMOD_DSP,
                                     index: ::std::os::raw::c_int,
                                     value: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_DSP_SetParameterData(dsp: *mut FMOD_DSP,
                                     index: ::std::os::raw::c_int,
                                     data: *mut ::std::os::raw::c_void,
                                     length: ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetParameterFloat(dsp: *mut FMOD_DSP,
                                      index: ::std::os::raw::c_int,
                                      value: *mut ::std::os::raw::c_float,
                                      valuestr: *mut ::std::os::raw::c_char,
                                      valuestrlen: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetParameterInt(dsp: *mut FMOD_DSP,
                                    index: ::std::os::raw::c_int,
                                    value: *mut ::std::os::raw::c_int,
                                    valuestr: *mut ::std::os::raw::c_char,
                                    valuestrlen: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetParameterBool(dsp: *mut FMOD_DSP,
                                     index: ::std::os::raw::c_int,
                                     value: *mut FMOD_BOOL,
                                     valuestr: *mut ::std::os::raw::c_char,
                                     valuestrlen: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetParameterData(dsp: *mut FMOD_DSP,
                                     index: ::std::os::raw::c_int,
                                     data: *mut *mut ::std::os::raw::c_void,
                                     length: *mut ::std::os::raw::c_uint,
                                     valuestr: *mut ::std::os::raw::c_char,
                                     valuestrlen: ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetNumParameters(dsp: *mut FMOD_DSP,
                                     numparams: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetParameterInfo(dsp: *mut FMOD_DSP,
                                     index: ::std::os::raw::c_int,
                                     desc: *mut *mut FMOD_DSP_PARAMETER_DESC)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetDataParameterIndex(dsp: *mut FMOD_DSP,
                                          datatype: ::std::os::raw::c_int,
                                          index: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_ShowConfigDialog(dsp: *mut FMOD_DSP,
                                     hwnd: *mut ::std::os::raw::c_void,
                                     show: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_DSP_GetInfo(dsp: *mut FMOD_DSP,
                            name: *mut ::std::os::raw::c_char,
                            version: *mut ::std::os::raw::c_uint,
                            channels: *mut ::std::os::raw::c_int,
                            configwidth: *mut ::std::os::raw::c_int,
                            configheight: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetType(dsp: *mut FMOD_DSP, _type: *mut FMOD_DSP_TYPE)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetIdle(dsp: *mut FMOD_DSP, idle: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetUserData(dsp: *mut FMOD_DSP,
                                userdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetUserData(dsp: *mut FMOD_DSP,
                                userdata: *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_SetMeteringEnabled(dsp: *mut FMOD_DSP,
                                       inputEnabled: FMOD_BOOL,
                                       outputEnabled: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetMeteringEnabled(dsp: *mut FMOD_DSP,
                                       inputEnabled: *mut FMOD_BOOL,
                                       outputEnabled: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_DSP_GetMeteringInfo(dsp: *mut FMOD_DSP,
                                    inputInfo: *mut FMOD_DSP_METERING_INFO,
                                    outputInfo: *mut FMOD_DSP_METERING_INFO)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_GetInput(dspconnection: *mut FMOD_DSPCONNECTION,
                                       input: *mut *mut FMOD_DSP)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_GetOutput(dspconnection:
                                            *mut FMOD_DSPCONNECTION,
                                        output: *mut *mut FMOD_DSP)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_SetMix(dspconnection: *mut FMOD_DSPCONNECTION,
                                     volume: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_GetMix(dspconnection: *mut FMOD_DSPCONNECTION,
                                     volume: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_SetMixMatrix(dspconnection:
                                               *mut FMOD_DSPCONNECTION,
                                           matrix:
                                               *mut ::std::os::raw::c_float,
                                           outchannels: ::std::os::raw::c_int,
                                           inchannels: ::std::os::raw::c_int,
                                           inchannel_hop:
                                               ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_GetMixMatrix(dspconnection:
                                               *mut FMOD_DSPCONNECTION,
                                           matrix:
                                               *mut ::std::os::raw::c_float,
                                           outchannels:
                                               *mut ::std::os::raw::c_int,
                                           inchannels:
                                               *mut ::std::os::raw::c_int,
                                           inchannel_hop:
                                               ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_GetType(dspconnection: *mut FMOD_DSPCONNECTION,
                                      _type: *mut FMOD_DSPCONNECTION_TYPE)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_SetUserData(dspconnection:
                                              *mut FMOD_DSPCONNECTION,
                                          userdata:
                                              *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_DSPConnection_GetUserData(dspconnection:
                                              *mut FMOD_DSPCONNECTION,
                                          userdata:
                                              *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_Release(geometry: *mut FMOD_GEOMETRY) -> FMOD_RESULT;
    pub fn FMOD_Geometry_AddPolygon(geometry: *mut FMOD_GEOMETRY,
                                    directocclusion: ::std::os::raw::c_float,
                                    reverbocclusion: ::std::os::raw::c_float,
                                    doublesided: FMOD_BOOL,
                                    numvertices: ::std::os::raw::c_int,
                                    vertices: *const FMOD_VECTOR,
                                    polygonindex: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetNumPolygons(geometry: *mut FMOD_GEOMETRY,
                                        numpolygons:
                                            *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetMaxPolygons(geometry: *mut FMOD_GEOMETRY,
                                        maxpolygons:
                                            *mut ::std::os::raw::c_int,
                                        maxvertices:
                                            *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetPolygonNumVertices(geometry: *mut FMOD_GEOMETRY,
                                               index: ::std::os::raw::c_int,
                                               numvertices:
                                                   *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_SetPolygonVertex(geometry: *mut FMOD_GEOMETRY,
                                          index: ::std::os::raw::c_int,
                                          vertexindex: ::std::os::raw::c_int,
                                          vertex: *const FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetPolygonVertex(geometry: *mut FMOD_GEOMETRY,
                                          index: ::std::os::raw::c_int,
                                          vertexindex: ::std::os::raw::c_int,
                                          vertex: *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_SetPolygonAttributes(geometry: *mut FMOD_GEOMETRY,
                                              index: ::std::os::raw::c_int,
                                              directocclusion:
                                                  ::std::os::raw::c_float,
                                              reverbocclusion:
                                                  ::std::os::raw::c_float,
                                              doublesided: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetPolygonAttributes(geometry: *mut FMOD_GEOMETRY,
                                              index: ::std::os::raw::c_int,
                                              directocclusion:
                                                  *mut ::std::os::raw::c_float,
                                              reverbocclusion:
                                                  *mut ::std::os::raw::c_float,
                                              doublesided: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_SetActive(geometry: *mut FMOD_GEOMETRY,
                                   active: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetActive(geometry: *mut FMOD_GEOMETRY,
                                   active: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Geometry_SetRotation(geometry: *mut FMOD_GEOMETRY,
                                     forward: *const FMOD_VECTOR,
                                     up: *const FMOD_VECTOR) -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetRotation(geometry: *mut FMOD_GEOMETRY,
                                     forward: *mut FMOD_VECTOR,
                                     up: *mut FMOD_VECTOR) -> FMOD_RESULT;
    pub fn FMOD_Geometry_SetPosition(geometry: *mut FMOD_GEOMETRY,
                                     position: *const FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetPosition(geometry: *mut FMOD_GEOMETRY,
                                     position: *mut FMOD_VECTOR)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_SetScale(geometry: *mut FMOD_GEOMETRY,
                                  scale: *const FMOD_VECTOR) -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetScale(geometry: *mut FMOD_GEOMETRY,
                                  scale: *mut FMOD_VECTOR) -> FMOD_RESULT;
    pub fn FMOD_Geometry_Save(geometry: *mut FMOD_GEOMETRY,
                              data: *mut ::std::os::raw::c_void,
                              datasize: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_SetUserData(geometry: *mut FMOD_GEOMETRY,
                                     userdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Geometry_GetUserData(geometry: *mut FMOD_GEOMETRY,
                                     userdata:
                                         *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_Release(reverb3d: *mut FMOD_REVERB3D) -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_Set3DAttributes(reverb3d: *mut FMOD_REVERB3D,
                                         position: *const FMOD_VECTOR,
                                         mindistance: ::std::os::raw::c_float,
                                         maxdistance: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_Get3DAttributes(reverb3d: *mut FMOD_REVERB3D,
                                         position: *mut FMOD_VECTOR,
                                         mindistance:
                                             *mut ::std::os::raw::c_float,
                                         maxdistance:
                                             *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_SetProperties(reverb3d: *mut FMOD_REVERB3D,
                                       properties:
                                           *const FMOD_REVERB_PROPERTIES)
     -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_GetProperties(reverb3d: *mut FMOD_REVERB3D,
                                       properties:
                                           *mut FMOD_REVERB_PROPERTIES)
     -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_SetActive(reverb3d: *mut FMOD_REVERB3D,
                                   active: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_GetActive(reverb3d: *mut FMOD_REVERB3D,
                                   active: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_SetUserData(reverb3d: *mut FMOD_REVERB3D,
                                     userdata: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Reverb3D_GetUserData(reverb3d: *mut FMOD_REVERB3D,
                                     userdata:
                                         *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_ParseID(idString: *const ::std::os::raw::c_char,
                               id: *mut FMOD_GUID) -> FMOD_RESULT;
    pub fn FMOD_Studio_System_Create(system: *mut *mut FMOD_STUDIO_SYSTEM,
                                     headerVersion: ::std::os::raw::c_uint)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_IsValid(system: *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_BOOL;
    pub fn FMOD_Studio_System_SetAdvancedSettings(system:
                                                      *mut FMOD_STUDIO_SYSTEM,
                                                  settings:
                                                      *mut FMOD_STUDIO_ADVANCEDSETTINGS)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetAdvancedSettings(system:
                                                      *mut FMOD_STUDIO_SYSTEM,
                                                  settings:
                                                      *mut FMOD_STUDIO_ADVANCEDSETTINGS)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_Initialize(system: *mut FMOD_STUDIO_SYSTEM,
                                         maxchannels: ::std::os::raw::c_int,
                                         studioflags: FMOD_STUDIO_INITFLAGS,
                                         flags: FMOD_INITFLAGS,
                                         extradriverdata:
                                             *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_Release(system: *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_Update(system: *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetLowLevelSystem(system:
                                                    *mut FMOD_STUDIO_SYSTEM,
                                                lowLevelSystem:
                                                    *mut *mut FMOD_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetEvent(system: *mut FMOD_STUDIO_SYSTEM,
                                       pathOrID:
                                           *const ::std::os::raw::c_char,
                                       event:
                                           *mut *mut FMOD_STUDIO_EVENTDESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetBus(system: *mut FMOD_STUDIO_SYSTEM,
                                     pathOrID: *const ::std::os::raw::c_char,
                                     bus: *mut *mut FMOD_STUDIO_BUS)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetVCA(system: *mut FMOD_STUDIO_SYSTEM,
                                     pathOrID: *const ::std::os::raw::c_char,
                                     vca: *mut *mut FMOD_STUDIO_VCA)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetBank(system: *mut FMOD_STUDIO_SYSTEM,
                                      pathOrID: *const ::std::os::raw::c_char,
                                      bank: *mut *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetEventByID(system: *mut FMOD_STUDIO_SYSTEM,
                                           id: *const FMOD_GUID,
                                           event:
                                               *mut *mut FMOD_STUDIO_EVENTDESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetBusByID(system: *mut FMOD_STUDIO_SYSTEM,
                                         id: *const FMOD_GUID,
                                         bus: *mut *mut FMOD_STUDIO_BUS)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetVCAByID(system: *mut FMOD_STUDIO_SYSTEM,
                                         id: *const FMOD_GUID,
                                         vca: *mut *mut FMOD_STUDIO_VCA)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetBankByID(system: *mut FMOD_STUDIO_SYSTEM,
                                          id: *const FMOD_GUID,
                                          bank: *mut *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetSoundInfo(system: *mut FMOD_STUDIO_SYSTEM,
                                           key: *const ::std::os::raw::c_char,
                                           info: *mut FMOD_STUDIO_SOUND_INFO)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_LookupID(system: *mut FMOD_STUDIO_SYSTEM,
                                       path: *const ::std::os::raw::c_char,
                                       id: *mut FMOD_GUID) -> FMOD_RESULT;
    pub fn FMOD_Studio_System_LookupPath(system: *mut FMOD_STUDIO_SYSTEM,
                                         id: *const FMOD_GUID,
                                         path: *mut ::std::os::raw::c_char,
                                         size: ::std::os::raw::c_int,
                                         retrieved:
                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetNumListeners(system: *mut FMOD_STUDIO_SYSTEM,
                                              numlisteners:
                                                  *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_SetNumListeners(system: *mut FMOD_STUDIO_SYSTEM,
                                              numlisteners:
                                                  ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetListenerAttributes(system:
                                                        *mut FMOD_STUDIO_SYSTEM,
                                                    index:
                                                        ::std::os::raw::c_int,
                                                    attributes:
                                                        *mut FMOD_3D_ATTRIBUTES)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_SetListenerAttributes(system:
                                                        *mut FMOD_STUDIO_SYSTEM,
                                                    index:
                                                        ::std::os::raw::c_int,
                                                    attributes:
                                                        *mut FMOD_3D_ATTRIBUTES)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_LoadBankFile(system: *mut FMOD_STUDIO_SYSTEM,
                                           filename:
                                               *const ::std::os::raw::c_char,
                                           flags: FMOD_STUDIO_LOAD_BANK_FLAGS,
                                           bank: *mut *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_LoadBankMemory(system: *mut FMOD_STUDIO_SYSTEM,
                                             buffer:
                                                 *const ::std::os::raw::c_char,
                                             length: ::std::os::raw::c_int,
                                             mode:
                                                 FMOD_STUDIO_LOAD_MEMORY_MODE,
                                             flags:
                                                 FMOD_STUDIO_LOAD_BANK_FLAGS,
                                             bank: *mut *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_LoadBankCustom(system: *mut FMOD_STUDIO_SYSTEM,
                                             info:
                                                 *const FMOD_STUDIO_BANK_INFO,
                                             flags:
                                                 FMOD_STUDIO_LOAD_BANK_FLAGS,
                                             bank: *mut *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_RegisterPlugin(system: *mut FMOD_STUDIO_SYSTEM,
                                             description:
                                                 *const FMOD_DSP_DESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_UnregisterPlugin(system:
                                                   *mut FMOD_STUDIO_SYSTEM,
                                               name:
                                                   *const ::std::os::raw::c_char)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_UnloadAll(system: *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_FlushCommands(system: *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_FlushSampleLoading(system:
                                                     *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_StartCommandCapture(system:
                                                      *mut FMOD_STUDIO_SYSTEM,
                                                  filename:
                                                      *const ::std::os::raw::c_char,
                                                  flags:
                                                      FMOD_STUDIO_COMMANDCAPTURE_FLAGS)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_StopCommandCapture(system:
                                                     *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_LoadCommandReplay(system:
                                                    *mut FMOD_STUDIO_SYSTEM,
                                                filename:
                                                    *const ::std::os::raw::c_char,
                                                flags:
                                                    FMOD_STUDIO_COMMANDREPLAY_FLAGS,
                                                replay:
                                                    *mut *mut FMOD_STUDIO_COMMANDREPLAY)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetBankCount(system: *mut FMOD_STUDIO_SYSTEM,
                                           count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetBankList(system: *mut FMOD_STUDIO_SYSTEM,
                                          array: *mut *mut FMOD_STUDIO_BANK,
                                          capacity: ::std::os::raw::c_int,
                                          count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetCPUUsage(system: *mut FMOD_STUDIO_SYSTEM,
                                          usage: *mut FMOD_STUDIO_CPU_USAGE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetBufferUsage(system: *mut FMOD_STUDIO_SYSTEM,
                                             usage:
                                                 *mut FMOD_STUDIO_BUFFER_USAGE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_ResetBufferUsage(system:
                                                   *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_SetCallback(system: *mut FMOD_STUDIO_SYSTEM,
                                          callback:
                                              FMOD_STUDIO_SYSTEM_CALLBACK,
                                          callbackmask:
                                              FMOD_STUDIO_SYSTEM_CALLBACK_TYPE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_SetUserData(system: *mut FMOD_STUDIO_SYSTEM,
                                          userdata:
                                              *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_System_GetUserData(system: *mut FMOD_STUDIO_SYSTEM,
                                          userdata:
                                              *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_IsValid(eventdescription:
                                                    *mut FMOD_STUDIO_EVENTDESCRIPTION)
     -> FMOD_BOOL;
    pub fn FMOD_Studio_EventDescription_GetID(eventdescription:
                                                  *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                              id: *mut FMOD_GUID)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetPath(eventdescription:
                                                    *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                path:
                                                    *mut ::std::os::raw::c_char,
                                                size: ::std::os::raw::c_int,
                                                retrieved:
                                                    *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetParameterCount(eventdescription:
                                                              *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                          count:
                                                              *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetParameterByIndex(eventdescription:
                                                                *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                            index:
                                                                ::std::os::raw::c_int,
                                                            parameter:
                                                                *mut FMOD_STUDIO_PARAMETER_DESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetParameter(eventdescription:
                                                         *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                     name:
                                                         *const ::std::os::raw::c_char,
                                                     parameter:
                                                         *mut FMOD_STUDIO_PARAMETER_DESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetUserPropertyCount(eventdescription:
                                                                 *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                             count:
                                                                 *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetUserPropertyByIndex(eventdescription:
                                                                   *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                               index:
                                                                   ::std::os::raw::c_int,
                                                               property:
                                                                   *mut FMOD_STUDIO_USER_PROPERTY)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetUserProperty(eventdescription:
                                                            *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                        name:
                                                            *const ::std::os::raw::c_char,
                                                        property:
                                                            *mut FMOD_STUDIO_USER_PROPERTY)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetLength(eventdescription:
                                                      *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                  length:
                                                      *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetMinimumDistance(eventdescription:
                                                               *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                           distance:
                                                               *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetMaximumDistance(eventdescription:
                                                               *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                           distance:
                                                               *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetSoundSize(eventdescription:
                                                         *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                     size:
                                                         *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_IsOneshot(eventdescription:
                                                      *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                  oneshot: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_IsStream(eventdescription:
                                                     *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                 isStream: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_Is3D(eventdescription:
                                                 *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                             is3D: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_HasCue(eventdescription:
                                                   *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                               cue: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_CreateInstance(eventdescription:
                                                           *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                       instance:
                                                           *mut *mut FMOD_STUDIO_EVENTINSTANCE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetInstanceCount(eventdescription:
                                                             *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                         count:
                                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetInstanceList(eventdescription:
                                                            *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                        array:
                                                            *mut *mut FMOD_STUDIO_EVENTINSTANCE,
                                                        capacity:
                                                            ::std::os::raw::c_int,
                                                        count:
                                                            *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_LoadSampleData(eventDesc:
                                                           *mut FMOD_STUDIO_EVENTDESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_UnloadSampleData(eventDesc:
                                                             *mut FMOD_STUDIO_EVENTDESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetSampleLoadingState(eventDesc:
                                                                  *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                              state:
                                                                  *mut FMOD_STUDIO_LOADING_STATE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_ReleaseAllInstances(eventdescription:
                                                                *mut FMOD_STUDIO_EVENTDESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_SetCallback(eventdescription:
                                                        *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                    callback:
                                                        FMOD_STUDIO_EVENT_CALLBACK,
                                                    callbackmask:
                                                        FMOD_STUDIO_EVENT_CALLBACK_TYPE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_GetUserData(eventdescription:
                                                        *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                    userData:
                                                        *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventDescription_SetUserData(eventdescription:
                                                        *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                                    userData:
                                                        *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_IsValid(eventinstance:
                                                 *mut FMOD_STUDIO_EVENTINSTANCE)
     -> FMOD_BOOL;
    pub fn FMOD_Studio_EventInstance_GetDescription(eventinstance:
                                                        *mut FMOD_STUDIO_EVENTINSTANCE,
                                                    description:
                                                        *mut *mut FMOD_STUDIO_EVENTDESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetVolume(eventinstance:
                                                   *mut FMOD_STUDIO_EVENTINSTANCE,
                                               volume:
                                                   *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetVolume(eventinstance:
                                                   *mut FMOD_STUDIO_EVENTINSTANCE,
                                               volume:
                                                   ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetPitch(eventinstance:
                                                  *mut FMOD_STUDIO_EVENTINSTANCE,
                                              pitch:
                                                  *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetPitch(eventinstance:
                                                  *mut FMOD_STUDIO_EVENTINSTANCE,
                                              pitch: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_Get3DAttributes(eventinstance:
                                                         *mut FMOD_STUDIO_EVENTINSTANCE,
                                                     attributes:
                                                         *mut FMOD_3D_ATTRIBUTES)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_Set3DAttributes(eventinstance:
                                                         *mut FMOD_STUDIO_EVENTINSTANCE,
                                                     attributes:
                                                         *mut FMOD_3D_ATTRIBUTES)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetProperty(eventinstance:
                                                     *mut FMOD_STUDIO_EVENTINSTANCE,
                                                 index:
                                                     FMOD_STUDIO_EVENT_PROPERTY,
                                                 value:
                                                     *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetProperty(eventinstance:
                                                     *mut FMOD_STUDIO_EVENTINSTANCE,
                                                 index:
                                                     FMOD_STUDIO_EVENT_PROPERTY,
                                                 value:
                                                     ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetPaused(eventinstance:
                                                   *mut FMOD_STUDIO_EVENTINSTANCE,
                                               paused: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetPaused(eventinstance:
                                                   *mut FMOD_STUDIO_EVENTINSTANCE,
                                               paused: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_Start(eventinstance:
                                               *mut FMOD_STUDIO_EVENTINSTANCE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_Stop(eventinstance:
                                              *mut FMOD_STUDIO_EVENTINSTANCE,
                                          mode: FMOD_STUDIO_STOP_MODE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetTimelinePosition(eventinstance:
                                                             *mut FMOD_STUDIO_EVENTINSTANCE,
                                                         position:
                                                             *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetTimelinePosition(eventinstance:
                                                             *mut FMOD_STUDIO_EVENTINSTANCE,
                                                         position:
                                                             ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetPlaybackState(eventinstance:
                                                          *mut FMOD_STUDIO_EVENTINSTANCE,
                                                      state:
                                                          *mut FMOD_STUDIO_PLAYBACK_STATE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetChannelGroup(eventinstance:
                                                         *mut FMOD_STUDIO_EVENTINSTANCE,
                                                     group:
                                                         *mut *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_Release(eventinstance:
                                                 *mut FMOD_STUDIO_EVENTINSTANCE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_IsVirtual(eventinstance:
                                                   *mut FMOD_STUDIO_EVENTINSTANCE,
                                               virtualState: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetParameter(eventinstance:
                                                      *mut FMOD_STUDIO_EVENTINSTANCE,
                                                  name:
                                                      *const ::std::os::raw::c_char,
                                                  parameter:
                                                      *mut *mut FMOD_STUDIO_PARAMETERINSTANCE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetParameterByIndex(eventinstance:
                                                             *mut FMOD_STUDIO_EVENTINSTANCE,
                                                         index:
                                                             ::std::os::raw::c_int,
                                                         parameter:
                                                             *mut *mut FMOD_STUDIO_PARAMETERINSTANCE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetParameterCount(eventinstance:
                                                           *mut FMOD_STUDIO_EVENTINSTANCE,
                                                       count:
                                                           *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetParameterValue(eventinstance:
                                                           *mut FMOD_STUDIO_EVENTINSTANCE,
                                                       name:
                                                           *const ::std::os::raw::c_char,
                                                       value:
                                                           *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetParameterValue(eventinstance:
                                                           *mut FMOD_STUDIO_EVENTINSTANCE,
                                                       name:
                                                           *const ::std::os::raw::c_char,
                                                       value:
                                                           ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetParameterValueByIndex(eventinstance:
                                                                  *mut FMOD_STUDIO_EVENTINSTANCE,
                                                              index:
                                                                  ::std::os::raw::c_int,
                                                              value:
                                                                  *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetParameterValueByIndex(eventinstance:
                                                                  *mut FMOD_STUDIO_EVENTINSTANCE,
                                                              index:
                                                                  ::std::os::raw::c_int,
                                                              value:
                                                                  ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_TriggerCue(eventinstance:
                                                    *mut FMOD_STUDIO_EVENTINSTANCE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetCallback(eventinstance:
                                                     *mut FMOD_STUDIO_EVENTINSTANCE,
                                                 callback:
                                                     FMOD_STUDIO_EVENT_CALLBACK,
                                                 callbackmask:
                                                     FMOD_STUDIO_EVENT_CALLBACK_TYPE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_GetUserData(eventinstance:
                                                     *mut FMOD_STUDIO_EVENTINSTANCE,
                                                 userData:
                                                     *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_EventInstance_SetUserData(eventinstance:
                                                     *mut FMOD_STUDIO_EVENTINSTANCE,
                                                 userData:
                                                     *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_ParameterInstance_IsValid(parameterinstance:
                                                     *mut FMOD_STUDIO_PARAMETERINSTANCE)
     -> FMOD_BOOL;
    pub fn FMOD_Studio_ParameterInstance_GetDescription(parameterinstance:
                                                            *mut FMOD_STUDIO_PARAMETERINSTANCE,
                                                        description:
                                                            *mut FMOD_STUDIO_PARAMETER_DESCRIPTION)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_ParameterInstance_GetValue(parameterinstance:
                                                      *mut FMOD_STUDIO_PARAMETERINSTANCE,
                                                  value:
                                                      *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_ParameterInstance_SetValue(parameterinstance:
                                                      *mut FMOD_STUDIO_PARAMETERINSTANCE,
                                                  value:
                                                      ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_IsValid(bus: *mut FMOD_STUDIO_BUS) -> FMOD_BOOL;
    pub fn FMOD_Studio_Bus_GetID(bus: *mut FMOD_STUDIO_BUS,
                                 id: *mut FMOD_GUID) -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_GetPath(bus: *mut FMOD_STUDIO_BUS,
                                   path: *mut ::std::os::raw::c_char,
                                   size: ::std::os::raw::c_int,
                                   retrieved: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_GetFaderLevel(bus: *mut FMOD_STUDIO_BUS,
                                         level: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_SetFaderLevel(bus: *mut FMOD_STUDIO_BUS,
                                         level: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_GetPaused(bus: *mut FMOD_STUDIO_BUS,
                                     paused: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_SetPaused(bus: *mut FMOD_STUDIO_BUS,
                                     paused: FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_GetMute(bus: *mut FMOD_STUDIO_BUS,
                                   mute: *mut FMOD_BOOL) -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_SetMute(bus: *mut FMOD_STUDIO_BUS, mute: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_StopAllEvents(bus: *mut FMOD_STUDIO_BUS,
                                         mode: FMOD_STUDIO_STOP_MODE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_LockChannelGroup(bus: *mut FMOD_STUDIO_BUS)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_UnlockChannelGroup(bus: *mut FMOD_STUDIO_BUS)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bus_GetChannelGroup(bus: *mut FMOD_STUDIO_BUS,
                                           group: *mut *mut FMOD_CHANNELGROUP)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_VCA_IsValid(vca: *mut FMOD_STUDIO_VCA) -> FMOD_BOOL;
    pub fn FMOD_Studio_VCA_GetID(vca: *mut FMOD_STUDIO_VCA,
                                 id: *mut FMOD_GUID) -> FMOD_RESULT;
    pub fn FMOD_Studio_VCA_GetPath(vca: *mut FMOD_STUDIO_VCA,
                                   path: *mut ::std::os::raw::c_char,
                                   size: ::std::os::raw::c_int,
                                   retrieved: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_VCA_GetFaderLevel(vca: *mut FMOD_STUDIO_VCA,
                                         level: *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_VCA_SetFaderLevel(vca: *mut FMOD_STUDIO_VCA,
                                         level: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_IsValid(bank: *mut FMOD_STUDIO_BANK) -> FMOD_BOOL;
    pub fn FMOD_Studio_Bank_GetID(bank: *mut FMOD_STUDIO_BANK,
                                  id: *mut FMOD_GUID) -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetPath(bank: *mut FMOD_STUDIO_BANK,
                                    path: *mut ::std::os::raw::c_char,
                                    size: ::std::os::raw::c_int,
                                    retrieved: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_Unload(bank: *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_LoadSampleData(bank: *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_UnloadSampleData(bank: *mut FMOD_STUDIO_BANK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetLoadingState(bank: *mut FMOD_STUDIO_BANK,
                                            state:
                                                *mut FMOD_STUDIO_LOADING_STATE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetSampleLoadingState(bank: *mut FMOD_STUDIO_BANK,
                                                  state:
                                                      *mut FMOD_STUDIO_LOADING_STATE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetStringCount(bank: *mut FMOD_STUDIO_BANK,
                                           count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetStringInfo(bank: *mut FMOD_STUDIO_BANK,
                                          index: ::std::os::raw::c_int,
                                          id: *mut FMOD_GUID,
                                          path: *mut ::std::os::raw::c_char,
                                          size: ::std::os::raw::c_int,
                                          retrieved:
                                              *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetEventCount(bank: *mut FMOD_STUDIO_BANK,
                                          count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetEventList(bank: *mut FMOD_STUDIO_BANK,
                                         array:
                                             *mut *mut FMOD_STUDIO_EVENTDESCRIPTION,
                                         capacity: ::std::os::raw::c_int,
                                         count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetBusCount(bank: *mut FMOD_STUDIO_BANK,
                                        count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetBusList(bank: *mut FMOD_STUDIO_BANK,
                                       array: *mut *mut FMOD_STUDIO_BUS,
                                       capacity: ::std::os::raw::c_int,
                                       count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetVCACount(bank: *mut FMOD_STUDIO_BANK,
                                        count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetVCAList(bank: *mut FMOD_STUDIO_BANK,
                                       array: *mut *mut FMOD_STUDIO_VCA,
                                       capacity: ::std::os::raw::c_int,
                                       count: *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_GetUserData(bank: *mut FMOD_STUDIO_BANK,
                                        userData:
                                            *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_Bank_SetUserData(bank: *mut FMOD_STUDIO_BANK,
                                        userData: *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_IsValid(replay:
                                                 *mut FMOD_STUDIO_COMMANDREPLAY)
     -> FMOD_BOOL;
    pub fn FMOD_Studio_CommandReplay_GetSystem(replay:
                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                               system:
                                                   *mut *mut FMOD_STUDIO_SYSTEM)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetLength(replay:
                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                               length:
                                                   *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetCommandCount(replay:
                                                         *mut FMOD_STUDIO_COMMANDREPLAY,
                                                     count:
                                                         *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetCommandInfo(replay:
                                                        *mut FMOD_STUDIO_COMMANDREPLAY,
                                                    commandIndex:
                                                        ::std::os::raw::c_int,
                                                    info:
                                                        *mut FMOD_STUDIO_COMMAND_INFO)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetCommandString(replay:
                                                          *mut FMOD_STUDIO_COMMANDREPLAY,
                                                      commandIndex:
                                                          ::std::os::raw::c_int,
                                                      description:
                                                          *mut ::std::os::raw::c_char,
                                                      capacity:
                                                          ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetCommandAtTime(replay:
                                                          *mut FMOD_STUDIO_COMMANDREPLAY,
                                                      time:
                                                          ::std::os::raw::c_float,
                                                      commandIndex:
                                                          *mut ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SetBankPath(replay:
                                                     *mut FMOD_STUDIO_COMMANDREPLAY,
                                                 bankPath:
                                                     *const ::std::os::raw::c_char)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_Start(replay:
                                               *mut FMOD_STUDIO_COMMANDREPLAY)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_Stop(replay:
                                              *mut FMOD_STUDIO_COMMANDREPLAY)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SeekToTime(replay:
                                                    *mut FMOD_STUDIO_COMMANDREPLAY,
                                                time: ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SeekToCommand(replay:
                                                       *mut FMOD_STUDIO_COMMANDREPLAY,
                                                   commandIndex:
                                                       ::std::os::raw::c_int)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetPaused(replay:
                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                               paused: *mut FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SetPaused(replay:
                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                               paused: FMOD_BOOL)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetPlaybackState(replay:
                                                          *mut FMOD_STUDIO_COMMANDREPLAY,
                                                      state:
                                                          *mut FMOD_STUDIO_PLAYBACK_STATE)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetCurrentCommand(replay:
                                                           *mut FMOD_STUDIO_COMMANDREPLAY,
                                                       commandIndex:
                                                           *mut ::std::os::raw::c_int,
                                                       currentTime:
                                                           *mut ::std::os::raw::c_float)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_Release(replay:
                                                 *mut FMOD_STUDIO_COMMANDREPLAY)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SetFrameCallback(replay:
                                                          *mut FMOD_STUDIO_COMMANDREPLAY,
                                                      callback:
                                                          FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SetLoadBankCallback(replay:
                                                             *mut FMOD_STUDIO_COMMANDREPLAY,
                                                         callback:
                                                             FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SetCreateInstanceCallback(replay:
                                                                   *mut FMOD_STUDIO_COMMANDREPLAY,
                                                               callback:
                                                                   FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_GetUserData(replay:
                                                     *mut FMOD_STUDIO_COMMANDREPLAY,
                                                 userdata:
                                                     *mut *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
    pub fn FMOD_Studio_CommandReplay_SetUserData(replay:
                                                     *mut FMOD_STUDIO_COMMANDREPLAY,
                                                 userdata:
                                                     *mut ::std::os::raw::c_void)
     -> FMOD_RESULT;
}
